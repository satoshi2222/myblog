<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WebMemo</title>
  
  <subtitle>Webについて調べたことをメモ</subtitle>
  <link href="/myblog.github.io/atom.xml" rel="self"/>
  <link href="http://pubsubhubbub.appspot.com" rel="hub"/>
  <link href="https://satoshi2222.github.io/myblog.github.io/"/>
  <updated>2019-06-05T15:19:47.104Z</updated>
  <id>https://satoshi2222.github.io/myblog.github.io/</id>
  
  <author>
    <name>webmemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NetlifyとGatsbyJSを連携させる</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/gatsby2/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/gatsby2/</id>
    <published>2019-05-29T07:15:11.000Z</published>
    <updated>2019-06-05T15:19:47.104Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/gatsby2/gatsby_pic.png" title="Image"><br><br></p><h2 id="Netlifyとは"><a href="#Netlifyとは" class="headerlink" title="Netlifyとは"></a>Netlifyとは</h2><p><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>は静的Webホスティングサービスで、<br>GitHubやGitLAbなどと連携可能でGitHubなどで管理しておけば、Netlifyのサーバー上でHTMLに変換して公開してくれる<br>AWSとは少し違いサーバー管理不要でコンテンツを用意するだけでサイトを公開できる<br>URLも自動で割り当てられて、独自ドメインを設定することもできる<br>無料のSSL/HTTPSを提供している<br>無料枠はストレージ: 100GB、転送量: 100GB/月、リクエスト制限: 500 requests/分まで使用できる</p><a id="more"></a><h2 id="Gatsbyで作成したものをGitのリポジトリに上げる"><a href="#Gatsbyで作成したものをGitのリポジトリに上げる" class="headerlink" title="Gatsbyで作成したものをGitのリポジトリに上げる"></a>Gatsbyで作成したものをGitのリポジトリに上げる</h2><ul><li>GitHubでリポジトリを作成</li><li>プロジェクトのファイルで<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/ユーザー名/リポジトリ名.git</span><br></pre></td></tr></table></figure></li></ul><p>GitHubにpush<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>リポジトリで反映されているか確認</p><h2 id="Netlifyを使ってサイトを作成する"><a href="#Netlifyを使ってサイトを作成する" class="headerlink" title="Netlifyを使ってサイトを作成する"></a>Netlifyを使ってサイトを作成する</h2><ul><li><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>にアクセス<br>Get started for freeをクリック</li><li>アカウント作成<br>GitHub、GitLab、Bitbucketとのアカウント連携するか、e-mailでアカウント登録できる<br>今回はGitHubを使うのでGitHubをクリックして、Gatsbyで作ったものをGitHubに上げたリポジトリ名を入力する<br>案内される通りにボタンを押していく</li><li>Build CommandとPublish directory<br>この入力欄ではデプロイ時のコマンドを設定できるので、npm run buildと設定する<br>branchはmasterで公開するディレクトリはpublishを入力する</li></ul><p>以上で設定完了<br>名前がつけられ対応するURLをクリックするとサイトが出来上がっている</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/gatsby2/gatsby_pic.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Netlifyとは&quot;&gt;&lt;a href=&quot;#Netlifyとは&quot; class=&quot;headerlink&quot; title=&quot;Netlifyとは&quot;&gt;&lt;/a&gt;Netlifyとは&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.netlify.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt;は静的Webホスティングサービスで、&lt;br&gt;GitHubやGitLAbなどと連携可能でGitHubなどで管理しておけば、Netlifyのサーバー上でHTMLに変換して公開してくれる&lt;br&gt;AWSとは少し違いサーバー管理不要でコンテンツを用意するだけでサイトを公開できる&lt;br&gt;URLも自動で割り当てられて、独自ドメインを設定することもできる&lt;br&gt;無料のSSL/HTTPSを提供している&lt;br&gt;無料枠はストレージ: 100GB、転送量: 100GB/月、リクエスト制限: 500 requests/分まで使用できる&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="gatsby" scheme="https://satoshi2222.github.io/myblog.github.io/tags/gatsby/"/>
    
      <category term="Netlify" scheme="https://satoshi2222.github.io/myblog.github.io/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>GatsbyJSをインストール</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/gatsby1/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/gatsby1/</id>
    <published>2019-05-28T18:03:42.000Z</published>
    <updated>2019-06-05T10:42:13.253Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/gatsby1/gatsby_pic.png" title="Image"><br><br></p><h2 id="GatsbyJSとは"><a href="#GatsbyJSとは" class="headerlink" title="GatsbyJSとは"></a>GatsbyJSとは</h2><ul><li>静的サイトジェネレーターで簡単にシンプルなブログが作れる</li><li>ReactJSを使っている</li><li>Markdownの記事書いて、記事の作成もコマンドから行える</li><li>node.js環境で動く</li><li>SPA(Single Page Application)が作れる</li><li>データベース不要で、ページの表示が速い</li><li>GraphQLを使っている</li><li>(starter)スターターが容易されていて、予め必要物がそろっているので色々なスターターを使えば自分好みにカスタマイズできる<br>このように色々あるが、Hexoと同じような技術</li></ul><a id="more"></a><h3 id="スタータとプラグインのリンク"><a href="#スタータとプラグインのリンク" class="headerlink" title="スタータとプラグインのリンク"></a>スタータとプラグインのリンク</h3><p><a href="https://www.gatsbyjs.org/starters/?v=2" target="_blank" rel="noopener">starter</a><br><a href="https://www.gatsbyjs.org/docs/plugins/" target="_blank" rel="noopener">plugin</a></p><h3 id="GraphQL-グラフキューエル-とは"><a href="#GraphQL-グラフキューエル-とは" class="headerlink" title="GraphQL(グラフキューエル)とは"></a>GraphQL(グラフキューエル)とは</h3><ul><li>Facebookが開発したAPI用のクエリ言語</li><li>サーバとのデーターのやり取りする記述</li><li>Gatsbyはデータ取得にこれを使用している</li><li>WebAPIとはオンライン上で使えるアプリケーション(instagramなど)</li><li>REST(REpresentational State Transfer )とよく比較される</li></ul><h3 id="ReactJS-リアクト-とは"><a href="#ReactJS-リアクト-とは" class="headerlink" title="ReactJS(リアクト)とは"></a>ReactJS(リアクト)とは</h3><p><a href="https://ja.reactjs.org/" target="_blank" rel="noopener">React</a>(公式ホームページ)</p><ul><li>JavaScriptのフレームワークではなく、UIを作るためのライブラリ</li><li>画面の表示が速い</li><li>Facebookが開発でFacebookやInstagramなどに使われている</li><li>UIを作りやすい</li><li>Virtual DOM(仮想DOM)</li><li>JavaScriptのコードの中にHTMLタグを記述できる(JSX)</li></ul><h2 id="Gatsbyをインストールする"><a href="#Gatsbyをインストールする" class="headerlink" title="Gatsbyをインストールする"></a>Gatsbyをインストールする</h2><p>Node.jsが必要なのでインストールしておく<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gatsby-cli</span><br></pre></td></tr></table></figure></p><p>公式どおりにインストールする</p><p>以下のコマンドでバージョンを確認</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatsby --version</span><br></pre></td></tr></table></figure><p>表示されれば無事インストールされる</p><h2 id="プロジェクトを作成"><a href="#プロジェクトを作成" class="headerlink" title="プロジェクトを作成"></a>プロジェクトを作成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatsby new blog</span><br></pre></td></tr></table></figure><p>これでblogというフォルダに色々キットが保存される<br>cd ディレクトリ名で移動して<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatsby develop</span><br></pre></td></tr></table></figure></p><p>を入力すると<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>にGatsbyが立ち上がる</p><p>node.jsが最新版でなかったためか、エラーが出たので注意する</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">GatsbyJS公式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/gatsby1/gatsby_pic.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;GatsbyJSとは&quot;&gt;&lt;a href=&quot;#GatsbyJSとは&quot; class=&quot;headerlink&quot; title=&quot;GatsbyJSとは&quot;&gt;&lt;/a&gt;GatsbyJSとは&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静的サイトジェネレーターで簡単にシンプルなブログが作れる&lt;/li&gt;
&lt;li&gt;ReactJSを使っている&lt;/li&gt;
&lt;li&gt;Markdownの記事書いて、記事の作成もコマンドから行える&lt;/li&gt;
&lt;li&gt;node.js環境で動く&lt;/li&gt;
&lt;li&gt;SPA(Single Page Application)が作れる&lt;/li&gt;
&lt;li&gt;データベース不要で、ページの表示が速い&lt;/li&gt;
&lt;li&gt;GraphQLを使っている&lt;/li&gt;
&lt;li&gt;(starter)スターターが容易されていて、予め必要物がそろっているので色々なスターターを使えば自分好みにカスタマイズできる&lt;br&gt;このように色々あるが、Hexoと同じような技術&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="gatsby" scheme="https://satoshi2222.github.io/myblog.github.io/tags/gatsby/"/>
    
  </entry>
  
  <entry>
    <title>Google Analytics 使い方</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/blog4/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/blog4/</id>
    <published>2019-05-03T14:41:34.000Z</published>
    <updated>2019-05-28T19:15:46.885Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog4/google-new-logo.png" title="Image"><br><br></p><h2 id="Google-Analytics-とは"><a href="#Google-Analytics-とは" class="headerlink" title="Google Analytics とは"></a>Google Analytics とは</h2><p><a href="https://developers.google.com/analytics/?hl=ja" target="_blank" rel="noopener">Google Analytics</a>(アナリティクス)はGoogleが用意した、無料で使えるツールで、アクセスの解析ができます<br>簡単に言うと、訪問者数、滞在時間、どこから来たか、広告クリック数と収益、使用デバイスなどのデータを入手できる<br>データ計測のためにJavaScriptのコードを組み込む<br>スマホユーザーが多いかどうかや、訪問前のサイトを知ることで行動パターンを把握することができる</p><h2 id="Google-Analytics-登録"><a href="#Google-Analytics-登録" class="headerlink" title="Google Analytics 登録"></a>Google Analytics 登録</h2><p>登録にはGoogleアカウントが必要なので事前に作る<br><a href="https://marketingplatform.google.com/about/analytics/" target="_blank" rel="noopener">Google Analytics</a>にアクセスして、無料で利用するをクリックする<br>用意したアカウントでログインする<br>初めての場合はお申込みボタンを押す<br>新しいアカウントの入力画面で必要な情報を入力<br>メニューの管理からトラッキング情報のウェブサイトのトラッキングという項目でトラッキングコードをコピーして<br>自分のサイトのHTMLファイルの＜/head＞ 終了タグの前に貼り付ける<br>これで登録と設置完了</p><h2 id="用語まとめ"><a href="#用語まとめ" class="headerlink" title="用語まとめ"></a>用語まとめ</h2><h3 id="セッション"><a href="#セッション" class="headerlink" title="セッション"></a>セッション</h3><p>ユーザーの訪問回数</p><h3 id="ユーザー"><a href="#ユーザー" class="headerlink" title="ユーザー"></a>ユーザー</h3><p>訪問者数(cookie情報をもとに判別)</p><h3 id="ページビュー数-PV数"><a href="#ページビュー数-PV数" class="headerlink" title="ページビュー数(PV数)"></a>ページビュー数(PV数)</h3><p>閲覧されたページの合計数</p><h3 id="直帰率"><a href="#直帰率" class="headerlink" title="直帰率"></a>直帰率</h3><p>１ページだけ訪れて離脱した場合カウントされる</p><h3 id="トラフィック"><a href="#トラフィック" class="headerlink" title="トラフィック"></a>トラフィック</h3><p>ユーザーがどこから来たのかを表示する</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://developers.google.com/analytics/?hl=ja" target="_blank" rel="noopener">Googleアナリティクス</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/blog4/google-new-logo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Google-Analytics-とは&quot;&gt;&lt;a href=&quot;#Google-A
      
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Google Search Console 使い方</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/blog3/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/blog3/</id>
    <published>2019-04-24T08:23:03.000Z</published>
    <updated>2019-05-27T10:42:04.089Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog3/google-new-logo.png" title="Image"><br><br></p><h2 id="Google-Search-Console-とは"><a href="#Google-Search-Console-とは" class="headerlink" title="Google Search Console とは"></a>Google Search Console とは</h2><p><a href="https://search.google.com/search-console/about?hl=ja" target="_blank" rel="noopener">Search Console</a>はGoogleが用意した、無料で使えるツールで、サイトの検索トラフィックや掲載順位を測定できる<br>簡単に言うと、サイトにエラーが出ていないか,サイトの表示回数、検索順位、訪問ユーザーが検索したワードやクリック数など確認できる<br>SEOの対策をする上でGoogleのガイドラインに適しているかどうかも大事なので、Webサイトを運営するなら必要なツール<br><a id="more"></a></p><h2 id="Search-Console-登録"><a href="#Search-Console-登録" class="headerlink" title="Search Console 登録"></a>Search Console 登録</h2><p>登録にはGoogleアカウントが必要なので事前に作る<br><a href="https://search.google.com/search-console/about?hl=ja&amp;utm_source=wmx&amp;utm_medium=wmx-welcome" target="_blank" rel="noopener">Google Search Console</a>にアクセスして、今すぐ開始をクリック<br>用意したアカウントでログイン、プロパティを追加から自分のサイトのURLを貼り付けて追加をクリック<br>別の方法でHTMLタグにチェックをいれて、コードをコピーして自分のサイトのheadタグに埋め込み、アップロードが終われば確認で登録が完了</p><h2 id="用語まとめ"><a href="#用語まとめ" class="headerlink" title="用語まとめ"></a>用語まとめ</h2><h3 id="合計クリック数"><a href="#合計クリック数" class="headerlink" title="合計クリック数"></a>合計クリック数</h3><p>検索結果に出た自分のサイトやページがクリックされた回数</p><h3 id="合計表示回数"><a href="#合計表示回数" class="headerlink" title="合計表示回数"></a>合計表示回数</h3><p>検索結果に表示された回数</p><h3 id="平均CTR"><a href="#平均CTR" class="headerlink" title="平均CTR"></a>平均CTR</h3><p>Click Through Rate(クリックスルーレート)の略でクリック率とも呼ばれる<br>表示回数をクリック数で割った数</p><h3 id="平均掲載順位"><a href="#平均掲載順位" class="headerlink" title="平均掲載順位"></a>平均掲載順位</h3><p>検索キーワードの平均順位をグラフで確認することができる指標<br>ですが、Googleが2019年9月に提供を停止するとのことなので、<br>別の指標を利用する必要がある</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://support.google.com/webmasters/answer/9128668?hl=ja&amp;visit_id=636924748232881293-3422315578&amp;rd=1" target="_blank" rel="noopener">Search Console ヘルプ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/blog3/google-new-logo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Google-Search-Console-とは&quot;&gt;&lt;a href=&quot;#Google-Search-Console-とは&quot; class=&quot;headerlink&quot; title=&quot;Google Search Console とは&quot;&gt;&lt;/a&gt;Google Search Console とは&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://search.google.com/search-console/about?hl=ja&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Search Console&lt;/a&gt;はGoogleが用意した、無料で使えるツールで、サイトの検索トラフィックや掲載順位を測定できる&lt;br&gt;簡単に言うと、サイトにエラーが出ていないか,サイトの表示回数、検索順位、訪問ユーザーが検索したワードやクリック数など確認できる&lt;br&gt;SEOの対策をする上でGoogleのガイドラインに適しているかどうかも大事なので、Webサイトを運営するなら必要なツール&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>GitHubが無料でプライベートリポジトリを作れるように</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/git4/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/git4/</id>
    <published>2019-02-11T21:05:25.000Z</published>
    <updated>2019-02-11T21:56:04.044Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/git4/gitlog1.png" title="Image"><br><br></p><h2 id="GitHub-プラン内容の変更"><a href="#GitHub-プラン内容の変更" class="headerlink" title="GitHub プラン内容の変更"></a>GitHub プラン内容の変更</h2><p><a href="https://github.blog/jp/2019-01-08-pricing-change-jp/" target="_blank" rel="noopener">GitHubニュース記事</a></p><p>今までは無料ユーザーはコードを公開する必要があった<br>もし非公開にするならば、有料プランを選択しなければならなかったが<br>１月８日のアップデートにより、その制限はなくなった<br>最大3人の共同編集者と無制限にプライベート構成できるようになった</p><a id="more"></a><h2 id="GitHubのプランの違い"><a href="#GitHubのプランの違い" class="headerlink" title="GitHubのプランの違い"></a>GitHubのプランの違い</h2><p><a href="https://github.co.jp/pricing.html" target="_blank" rel="noopener">GitHubプラン</a></p><h2 id="ダウングレードの方法"><a href="#ダウングレードの方法" class="headerlink" title="ダウングレードの方法"></a>ダウングレードの方法</h2><ul><li>GitHubのSettingsをクリック</li><li>Billingをクリック</li><li>Downgrade to freeをクリック</li><li>I understand. をクリック</li></ul><p>フリーに移行できない、リポジトリがある場合はエラーがでる</p><h2 id="リポジトリを非公開に変更"><a href="#リポジトリを非公開に変更" class="headerlink" title="リポジトリを非公開に変更"></a>リポジトリを非公開に変更</h2><ul><li>非公開にしたいリポジトリを開く</li><li>Settingをクリック</li><li>Danger Zoneという赤い部分に移動する</li><li>Make privateをクリック</li><li>後は指示通りに入力すれば完了</li></ul><p>リポジトリ名に鍵アイコンがついていれば成功</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/git4/gitlog1.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;GitHub-プラン内容の変更&quot;&gt;&lt;a href=&quot;#GitHub-プラン内容の変更&quot; class=&quot;headerlink&quot; title=&quot;GitHub プラン内容の変更&quot;&gt;&lt;/a&gt;GitHub プラン内容の変更&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.blog/jp/2019-01-08-pricing-change-jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHubニュース記事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今までは無料ユーザーはコードを公開する必要があった&lt;br&gt;もし非公開にするならば、有料プランを選択しなければならなかったが&lt;br&gt;１月８日のアップデートにより、その制限はなくなった&lt;br&gt;最大3人の共同編集者と無制限にプライベート構成できるようになった&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://satoshi2222.github.io/myblog.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>node.jsでwebサーバーを作成</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/node6/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/node6/</id>
    <published>2018-12-20T15:00:16.000Z</published>
    <updated>2019-02-11T20:54:58.803Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node6/nodelogo.png" title="Image"><br><br></p><h2 id="簡単なwebサーバーの作り方"><a href="#簡単なwebサーバーの作り方" class="headerlink" title="簡単なwebサーバーの作り方"></a>簡単なwebサーバーの作り方</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//server.js</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var server = http.createServer();</span><br><span class="line">server.on(&apos;request&apos;, doRequest);</span><br><span class="line">function doRequest(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class="line">    res.write(&quot;Hello World! sever-&quot;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line">server.listen(3000, &apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server runnnig&quot;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h3><p>var http = require(‘http’);HTTP関連の機能が入っている<br>var server = http.createServer();httpのサーバー作成する関数<br>server.on(‘request’, doRequest).listen(8080, ‘127.0.0.1’);<br>onメソッドは第１引数にイベント名、第２引数に処（関数）<br>requestはクライアントからのリクエストを受け取ったときに発生するイベント<br>プラウザからサーバーにアクセスした時のサーバー側の処理で、requestが発生するとコールバック関数を呼び出す<br>listenメソッドは外部からリクエストを受け付けるポート番号を指定できる<br>第１引数にポート番号、第2引数: IPアドレスを指定<br>writeHeadは第1引数にステータスコード、第2引数にその他のヘッダーのキーと値を送信する<br>writeはレスポンスを送信する<br>endはレスポンスの送信を終了する</p><h3 id="サーバーを立ち上げる"><a href="#サーバーを立ち上げる" class="headerlink" title="サーバーを立ち上げる"></a>サーバーを立ち上げる</h3><p>上記のjsファイルを<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ファイル名</span><br></pre></td></tr></table></figure></p><p>などで実行して、<br><a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> にアクセスしてみるとHello world!と書かれたページが表示される</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/node6/nodelogo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;簡単なwebサーバーの作り方&quot;&gt;&lt;a href=&quot;#簡単なwebサーバーの作り方&quot; class=&quot;headerlink&quot; title=&quot;簡単なwebサーバーの作り方&quot;&gt;&lt;/a&gt;簡単なwebサーバーの作り方&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//server.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var http = require(&amp;apos;http&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var server = http.createServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.on(&amp;apos;request&amp;apos;, doRequest);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function doRequest(req, res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.writeHead(200, &amp;#123;&amp;apos;Content-Type&amp;apos;: &amp;apos;text/plain&amp;apos;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.write(&amp;quot;Hello World! sever-&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(3000, &amp;apos;127.0.0.1&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(&amp;quot;server runnnig&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/web/"/>
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>SPAについて</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/javascript4/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/javascript4/</id>
    <published>2018-12-11T23:42:28.000Z</published>
    <updated>2018-12-12T11:14:00.674Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/javascript4/htmlcssjs.png" title="Image"><br><br></p><h2 id="SPAとは"><a href="#SPAとは" class="headerlink" title="SPAとは"></a>SPAとは</h2><p>SinglePageApplicationの略で単一のページでコンテンツの切り替えを行うWebアプリケーションのこと<br>ユーザーのアクションに対して必要なデータだけサーバーに要求して<br>ページ全体ではなく、一部分だけを差し替えて、コンテンツを表示する<br><a id="more"></a><br>初回のみおページ全体をロードして、次からはサーバーからJSONデータを受け取ってリロードする<br>SPAにおける主要な技術はAjaxでjQueryの登場でより広く使われるようになった<br>jQueryでも可能だが、DOM操作などに限界があり、<br>代わりにAngularJSやReactやVue.jsといったSPA向けのフレームワークを使用する<br>例を挙げると、FacebookやGoogleMapやSlackなど</p><h3 id="Ajaxとは"><a href="#Ajaxとは" class="headerlink" title="Ajaxとは"></a>Ajaxとは</h3><p>Ajax(エイジャックス)はAsynchronous JavaScript XMLの略で、<br>JavaScriptとXMLを使って非同期にサーバーと通信を行うこと<br>ウェブブラウザ内で非同期通信を行いながらインターフェイスの構築を行うプログラミング手法<br>node.jsの登場でサーバ側におけるデータ形式変換の必要なしに、Ajaxを実現できる環境が整い始めている(wikipedeia引用)[<a href="https://ja.wikipedia.org/wiki/Ajax]" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/Ajax]</a></p><h3 id="JSONとは"><a href="#JSONとは" class="headerlink" title="JSONとは"></a>JSONとは</h3><p>JavaScriptObjectNotationの略で軽量のデータ交換フォーマット<br>人間にとって読み書きが容易で、マシンにとっても簡単にパースや生成を行なえる形式</p><h2 id="PWAとは"><a href="#PWAとは" class="headerlink" title="PWAとは"></a>PWAとは</h2><p>ProgressiveWebAppsの略で、モバイル向けWebサイトをGooglePlayストアなどでみかけるアプリ(ネイティブアプリ)のように使える仕組みのこと<br>レスポンスが向上してユーザーインストールさせることがなく、オフラインでのコンテンツ利用が可能<br>プッシュ通知の受信やストアの審査なくアップデートが可能</p><h3 id="WEBページをPWAにするには"><a href="#WEBページをPWAにするには" class="headerlink" title="WEBページをPWAにするには"></a>WEBページをPWAにするには</h3><p>特定のフレームワークなどは必要なく、Googleが策定した(Progressive Web App Checklist)[<a href="https://developers.google.com/web/progressive-web-apps/checklist]に沿って開発すればいい" target="_blank" rel="noopener">https://developers.google.com/web/progressive-web-apps/checklist]に沿って開発すればいい</a><br>Googleが推奨していて、Googleが開発キットも用意している</p><h2 id="AMPとは"><a href="#AMPとは" class="headerlink" title="AMPとは"></a>AMPとは</h2><p>AMP(アンプ)とはAccelerated Mobile Pagesの略で、<br>GoogleとTwitterが共同で立ち上げたオープンソースプロジェクト<br>モバイル端末でホームページを高速で表示させるための仕組み<br>通常はWebページにアクセスする場合、クリックに応じてサーバからHTMLなどを読み込むが、AMPに対応しているページは、あらかじめGoogleなどのサーバーにキャッシュすることで、読み込み時間を削減している<br>(導入ガイド)[<a href="https://webmaster-ja.googleblog.com/2016/01/accelerated-mobile-pages.html]" target="_blank" rel="noopener">https://webmaster-ja.googleblog.com/2016/01/accelerated-mobile-pages.html]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/javascript4/htmlcssjs.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;SPAとは&quot;&gt;&lt;a href=&quot;#SPAとは&quot; class=&quot;headerlink&quot; title=&quot;SPAとは&quot;&gt;&lt;/a&gt;SPAとは&lt;/h2&gt;&lt;p&gt;SinglePageApplicationの略で単一のページでコンテンツの切り替えを行うWebアプリケーションのこと&lt;br&gt;ユーザーのアクションに対して必要なデータだけサーバーに要求して&lt;br&gt;ページ全体ではなく、一部分だけを差し替えて、コンテンツを表示する&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
      <category term="Web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptのデータ型</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/javascript3/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/javascript3/</id>
    <published>2018-12-11T20:49:13.000Z</published>
    <updated>2018-12-11T22:05:37.971Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/javascript3/htmlcssjs.png" title="Image"><br><br></p><h2 id="データ型とは"><a href="#データ型とは" class="headerlink" title="データ型とは"></a>データ型とは</h2><p>データの種類で、JavaScriptで扱うデータは、文字列の場合もあれば、数値の場合もあるtrueなども含まれる<br>値はいずれかのデータ型に属することになり、それぞれできることが異なる</p><a id="more"></a><p>データ型はリテラルという表記ができる<br>リテラルとはプログラム上に直接書かれた数値や文字列のこと<br>データ型には以下のように、プリミティブ型とオブジェクト型に分けられる</p><h3 id="プリミティブ型"><a href="#プリミティブ型" class="headerlink" title="プリミティブ型"></a>プリミティブ型</h3><p>プリミティブとはプロパティとメソッドを持たないデータのこと</p><ul><li>Number型(数値)<br>JavaScriptにおいては数値は全て浮動小数点数として扱われる(全て数値型)</li><li>String型(文字)<br>文字列リテラルは””や’’のクォートで囲む</li><li>Boolean型(真偽)<br>trueとfalseの２つのみ</li><li>Undefined型<br>変数の値が未定義を示す値</li><li>Null型<br>参照するものがない状態</li><li>Symbol型(シンボル型)<br>変数 = Symbol()と書いて生成でき、不変なプリミティブ値</li></ul><h3 id="オブジェクト型"><a href="#オブジェクト型" class="headerlink" title="オブジェクト型"></a>オブジェクト型</h3><ul><li>Object</li></ul><h2 id="typeof演算子"><a href="#typeof演算子" class="headerlink" title="typeof演算子"></a>typeof演算子</h2><p>対象の値のデータ型を表す文字列を返す演算子なので、変数の型を知るのに役立つ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/javascript3/htmlcssjs.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;データ型とは&quot;&gt;&lt;a href=&quot;#データ型とは&quot; class=&quot;headerlink&quot; title=&quot;データ型とは&quot;&gt;&lt;/a&gt;データ型とは&lt;/h2&gt;&lt;p&gt;データの種類で、JavaScriptで扱うデータは、文字列の場合もあれば、数値の場合もあるtrueなども含まれる&lt;br&gt;値はいずれかのデータ型に属することになり、それぞれできることが異なる&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptでオブジェクトを使用する</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/javascript2/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/javascript2/</id>
    <published>2018-12-11T10:26:04.000Z</published>
    <updated>2018-12-11T22:28:54.242Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/javascript2/htmlcssjs.png" title="Image"><br><br></p><h2 id="オブジェクトとは"><a href="#オブジェクトとは" class="headerlink" title="オブジェクトとは"></a>オブジェクトとは</h2><p>複数のプロパティを持つデータのまとまりで、各種データまとめて、１つの変数として扱えるデータなので、その点は配列と同じ<br>配列や関数もオブジェクトである<br><a id="more"></a><br>オブジェクトのプロパティとは、そのオブジェクトの状態を表すもの<br>でキー(名前)と値から構成される<br>オブジェクトを値として記述する場合は、{}(オブジェクトリテラル)にプロパティ名と値をセットして記述する<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var object = &#123;</span><br><span class="line">    // キー: 値</span><br><span class="line">    &quot;key&quot;: &quot;value&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="ブラケット記法"></a>と.(ドット記法)を使ってプロパティにアクセスする<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(object.key); </span><br><span class="line">console.log(object[&quot;key&quot;]);</span><br></pre></td></tr></table></figure></p><h2 id="メソッド"><a href="#メソッド" class="headerlink" title="メソッド"></a>メソッド</h2><p>オブジェクトのプロパティに代入された関数<br>動作を指定する際に用いる処理<br>windowオブジェクトならalert()やopen()<br>console.logのlog()もメソッド</p><h2 id="DOM-Document-Object-Model-とは"><a href="#DOM-Document-Object-Model-とは" class="headerlink" title="DOM(Document Object Model)とは"></a>DOM(Document Object Model)とは</h2><p>xmlやhtmlの各要素にアクセスできて、操作できる仕様(API)<br>JavaScriptはHTMLがプラウザに読み込まれると、DOMオブジェクト(タグ、属性、値、文書)として、自動的に認識してくれる</p><h2 id="コンストラクタ関数"><a href="#コンストラクタ関数" class="headerlink" title="コンストラクタ関数"></a>コンストラクタ関数</h2><p>オブジェクトを生成できる<br>生成されたオブジェクトをインスタンスという<br>他言語のクラスに似ているようなもの<br>JavaScriptでオブジェクトを作る方法は、オブジェクト初期化子を使うか、コンストラクタからインスタンスを作成する２つがある<br>コンストラクタでは、thisを使いオブジェクトの定義する<br>同じプロパティを持つ複数のオブジェクトが、それぞれのプロパティの値が異なる場合に役に立つ</p><h3 id="オブジェクト初期化子"><a href="#オブジェクト初期化子" class="headerlink" title="オブジェクト初期化子"></a>オブジェクト初期化子</h3><p>new Object()、Object.create()、リテラル記法({}で囲む)の３つの方法でオブジェクトを初期化して、新たにオブジェクトを生成する方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/javascript2/htmlcssjs.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;オブジェクトとは&quot;&gt;&lt;a href=&quot;#オブジェクトとは&quot; class=&quot;headerlink&quot; title=&quot;オブジェクトとは&quot;&gt;&lt;/a&gt;オブジェクトとは&lt;/h2&gt;&lt;p&gt;複数のプロパティを持つデータのまとまりで、各種データまとめて、１つの変数として扱えるデータなので、その点は配列と同じ&lt;br&gt;配列や関数もオブジェクトである&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptの関数について</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/javascript1/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/javascript1/</id>
    <published>2018-12-10T10:12:13.000Z</published>
    <updated>2018-12-10T20:45:57.571Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/javascript1/htmlcssjs.png" title="Image"><br><br></p><h2 id="JavaScriptの関数とは"><a href="#JavaScriptの関数とは" class="headerlink" title="JavaScriptの関数とは"></a>JavaScriptの関数とは</h2><p>function(ファンクション)のことで、簡単な例ととして書くと<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 関数名()&#123;</span><br><span class="line">    処理内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>となる<br>よく使う処理を関数という形で定義して、使いたいとき呼び出せる<br>再利用ができて修正もしやすいメリットがある<br>次のように引数を渡すこともできる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function　関数名(引数)&#123;</span><br><span class="line">    処理内容</span><br><span class="line">    return 返り値;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="関数リテラル-無名関数"><a href="#関数リテラル-無名関数" class="headerlink" title="関数リテラル(無名関数)"></a>関数リテラル(無名関数)</h3><p>関数名をつけずに、関数を定義する<br>関数を変数に代入して、変数の記述で関数を実行する<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var 変数名 = function(引数1、引数2)&#123;</span><br><span class="line">    returan 引数1 + 引数2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>１度しか使わない場合や、名前を付ける必要のないもの、<br>名前空間を汚さないために使う</p><h3 id="即時関数"><a href="#即時関数" class="headerlink" title="即時関数"></a>即時関数</h3><p>作成して、即実行できる関数<br>無名関数を()で囲み、最後にも、()をつけることで実行できる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    //処理</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>引数や返り値を持つこともできる<br>使うメリットとしては、スコープ汚染を防ぐためで、閉じたスコープを作成できるので即時関数の中の変数はローカルな変数となる<br>ES6ではletやconstがあるのでそこまで使わないかもしれない</p><h3 id="アロー関数"><a href="#アロー関数" class="headerlink" title="アロー関数"></a>アロー関数</h3><p>ES6で導入された関数で、=&gt;を使って関数リテラルを記述する<br>functionを宣言する必要はなく、省略して書くことができる<br>returnするだけなら、returnとブロック({}のこと)を省略して書ける(一行だけの場合はreturnは自動で行われる)<br>引数が２つ以上なら引数に()がいるが引数が１つなら()を省略できる<br>引数が０なら空の丸括弧()がいる<br>コンストラクタ関数として使うことができない<br>宣言元(アロー関数が宣言された場所)のthisを参照する<br>その他色々とfunctionとの違いがあるが今回は表面だけにしておく</p><h2 id="クロージャ"><a href="#クロージャ" class="headerlink" title="クロージャ"></a>クロージャ</h2><p>クロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を ‘覚えています(コピペ)<br>簡単にいうとスコープの外にある変数を参照できるということ<br>テクニックなので、使わなければ出来ないというものではない<br>JavaSCriptは関数を入れ子にできるので、関数の中に他の関数を定義できるのと、JavaScriptの関数は定義時のコンテキスト(文脈)で実行されて、関数は定義時のコンテキストとは異なるコンテキスト上に持ち出されるとクロージャになるらしい<br>ほぼコピペなので、使う時に又詳しく調べることにする<br>参考リンク<br><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">クロージャ(MDN)</a><br><a href="analogic.jp/closure/">ANALOGIC</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/javascript1/htmlcssjs.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;JavaScriptの関数とは&quot;&gt;&lt;a href=&quot;#JavaScriptの関数とは&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptの関数とは&quot;&gt;&lt;/a&gt;JavaScriptの関数とは&lt;/h2&gt;&lt;p&gt;function(ファンクション)のことで、簡単な例ととして書くと&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function 関数名()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    処理内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;となる&lt;br&gt;よく使う処理を関数という形で定義して、使いたいとき呼び出せる&lt;br&gt;再利用ができて修正もしやすいメリットがある&lt;br&gt;次のように引数を渡すこともできる&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function　関数名(引数)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    処理内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 返り値;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>var/let/constの違い</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/node5/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/node5/</id>
    <published>2018-12-06T10:42:04.000Z</published>
    <updated>2018-12-10T11:32:58.323Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node5/nodelogo.png" title="Image"><br><br></p><h2 id="var-let-constについて"><a href="#var-let-constについて" class="headerlink" title="var/let/constについて"></a>var/let/constについて</h2><p>変数宣言のこと<br>varしかなかったが、ES2015でletとconstが追加された<br>varで宣言された場合関数スコープ(functionの中に書かれた変数)となるが、letとconstはブロックスコープとなる<br>varは変数の巻き上げ(ホイスティング)が起こるがletでが少し挙動が異なる？(あまり詳しく調べてない)<br>constとletがあるのでvarは積極的使うことはない<br><a id="more"></a></p><h3 id="ブロックスコープ"><a href="#ブロックスコープ" class="headerlink" title="ブロックスコープ"></a>ブロックスコープ</h3><p>{}で囲まれている部分のこと<br>varの場合だとfunction(){}がスコープとなっていたので<br>ifやforはスコープとならなかった<br>letで宣言された変数はforなどの中で閉じ込め、ループごとに固定される</p><h3 id="ローカル変数"><a href="#ローカル変数" class="headerlink" title="ローカル変数"></a>ローカル変数</h3><p>宣言した関数内でしか利用できない変数<br>functionのなかで宣言する</p><h3 id="グローバル変数"><a href="#グローバル変数" class="headerlink" title="グローバル変数"></a>グローバル変数</h3><p>プログラム全体、全てのスコープからアクセスできる変数</p><h3 id="letとconst"><a href="#letとconst" class="headerlink" title="letとconst"></a>letとconst</h3><p>基本的にはconstを使う<br>constは再代入不可で、再代入が必要な場合はletを使う</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/node5/nodelogo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;var-let-constについて&quot;&gt;&lt;a href=&quot;#var-let-constについて&quot; class=&quot;headerlink&quot; title=&quot;var/let/constについて&quot;&gt;&lt;/a&gt;var/let/constについて&lt;/h2&gt;&lt;p&gt;変数宣言のこと&lt;br&gt;varしかなかったが、ES2015でletとconstが追加された&lt;br&gt;varで宣言された場合関数スコープ(functionの中に書かれた変数)となるが、letとconstはブロックスコープとなる&lt;br&gt;varは変数の巻き上げ(ホイスティング)が起こるがletでが少し挙動が異なる？(あまり詳しく調べてない)&lt;br&gt;constとletがあるのでvarは積極的使うことはない&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.jsの書き方</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/node4/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/node4/</id>
    <published>2018-12-02T18:30:12.000Z</published>
    <updated>2018-12-04T20:40:39.251Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node4/nodelogo.png" title="Image"><br><br></p><h2 id="node-jsの書き方"><a href="#node-jsの書き方" class="headerlink" title="node.jsの書き方"></a>node.jsの書き方</h2><h3 id="‘use-strict’"><a href="#‘use-strict’" class="headerlink" title="‘use strict’;"></a>‘use strict’;</h3><p>これを定義することにより、StrictModeが有効となる<br>これにより、より厳格なコードを書くことができてエラー発生を未然に防ぎやすくなる<br>定義されていない変数を禁止するなど、JavaやＣに近くなる<br>JavaScriptエンジンによる最適化処理を困難にする誤りを修正する<br>サポートしないブラウザもあるので注意<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br></pre></td></tr></table></figure></p><p>スクリプトの先頭以外に追加してもStrictモードにならない</p><p>参考リンク<br><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">Strictモード(MDN)</a></p><h2 id="require"><a href="#require" class="headerlink" title="require()"></a>require()</h2><p>mode.jsはデータベース、ネットワーク接続やファイルの操作が可能でライブラリを読み込むことができる<br>requireは外部ライブラリ、拡張機能を参照できる<br>node.jsはnpm(パッケージマネージャー)があり、これでインストールしたものは、<br>require()で読み込むことが可能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 変数名 = require(モジュール名)</span><br></pre></td></tr></table></figure></p><h2 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h2><p>モジュールを作る場合はexportsを使う<br>exports.メソッド名 = 変数などのように記述する<br>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var abc = 値</span><br><span class="line">exports.abc =abc</span><br></pre></td></tr></table></figure></p><p>これをrequireで読みだす</p><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>似ている書き方でmodule.exportがある<br>違いがあるらしいので使用する時にまた調べる</p><h2 id="node-jsのコアモジュール-API"><a href="#node-jsのコアモジュール-API" class="headerlink" title="node.jsのコアモジュール(API)"></a>node.jsのコアモジュール(API)</h2><p>コアモジュールとはnode.jsに標準で入っているモジュールのことで、<br>便利なものが多いのでよく使うものをメモしておく<br>基本的にrequireを使って呼び出す</p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>名前の通りHTTPの関連をまとめたもの<br>httpsもある<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="fs-FileSystem"><a href="#fs-FileSystem" class="headerlink" title="fs(FileSystem)"></a>fs(FileSystem)</h3><p>ファイルを操作するモジュール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="url-UniformResourceLocator"><a href="#url-UniformResourceLocator" class="headerlink" title="url(UniformResourceLocator)"></a>url(UniformResourceLocator)</h3><p>URLの文字列の解析、生成などができる<br>構文を解析することをパース(parse)という<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = require(&apos;url&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="util"><a href="#util" class="headerlink" title="util"></a>util</h3><p>util.formatやutil.inspectなど汎用なユーティリティを使える<br>いろいろあるので使う時に調べる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var util = require(&apos;util&apos;);</span><br></pre></td></tr></table></figure></p><p>参照<br><a href="https://nodejs.org/api/util.html" target="_blank" rel="noopener">Node.js v11.3.0 Documentation</a><br><a href="https://www.ibm.com/support/knowledgecenter/ja/SS9H2Y_7.5.0/com.ibm.dp.doc/util_js.html" target="_blank" rel="noopener">IBM</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/node4/nodelogo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;node-jsの書き方&quot;&gt;&lt;a href=&quot;#node-jsの書き方&quot; class=&quot;headerlink&quot; title=&quot;node.jsの書き方&quot;&gt;&lt;/a&gt;node.jsの書き方&lt;/h2&gt;&lt;h3 id=&quot;‘use-strict’&quot;&gt;&lt;a href=&quot;#‘use-strict’&quot; class=&quot;headerlink&quot; title=&quot;‘use strict’;&quot;&gt;&lt;/a&gt;‘use strict’;&lt;/h3&gt;&lt;p&gt;これを定義することにより、StrictModeが有効となる&lt;br&gt;これにより、より厳格なコードを書くことができてエラー発生を未然に防ぎやすくなる&lt;br&gt;定義されていない変数を禁止するなど、JavaやＣに近くなる&lt;br&gt;JavaScriptエンジンによる最適化処理を困難にする誤りを修正する&lt;br&gt;サポートしないブラウザもあるので注意&lt;br&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>クラウドについて</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/web2/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/web2/</id>
    <published>2018-11-27T19:08:15.000Z</published>
    <updated>2018-12-02T06:09:19.924Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/web2/web1.jpg" title="Image"><br><br></p><h2 id="クラウド-クラウド・コンピューティング-とは"><a href="#クラウド-クラウド・コンピューティング-とは" class="headerlink" title="クラウド(クラウド・コンピューティング)とは"></a>クラウド(クラウド・コンピューティング)とは</h2><p>インターネットなどのネットワークを通じて、サービスを必要な時だけ利用すること<br>ソフトウェアやアプリケーションなどを自分で持っていなくても<br>利用できるのことをクラウドサービスという(インストールなどが必要ない)<br>例をあげると、GmailやGoogleドライブ、YouTubeなどもアップロードした動画を提供会社が保存、管理している</p><a id="more"></a><h2 id="クラウドの種類"><a href="#クラウドの種類" class="headerlink" title="クラウドの種類"></a>クラウドの種類</h2><p>クラウド幅広く色々な意味があり、利用する形により次のように分類される</p><h3 id="SaaS-Software-as-a-Service-サース"><a href="#SaaS-Software-as-a-Service-サース" class="headerlink" title="SaaS(Software as a Service)サース"></a>SaaS(Software as a Service)サース</h3><p>ネット経由でソフトウェア(Webサービス)を提供するサービス<br>ASP(Application Service Provider)と同意語<br>Gmail、GoogleMap、無料のブログサービスなど</p><h3 id="PaaS-Platform-as-a-Service-パース"><a href="#PaaS-Platform-as-a-Service-パース" class="headerlink" title="PaaS(Platform as a Service)パース"></a>PaaS(Platform as a Service)パース</h3><p>ネット経由でアプリケーションなどの開発環境を提供するサービス<br>インフラに加えてミドルウェア(DBなど)、プラットフォームなどを提供<br>GoogleAppEngineやMicrosoftAzureなど</p><h3 id="IaaS-Infrastructure-as-a-Service-イァース"><a href="#IaaS-Infrastructure-as-a-Service-イァース" class="headerlink" title="IaaS(Infrastructure as a Service)イァース"></a>IaaS(Infrastructure as a Service)イァース</h3><p>ネット経由で仮想マシンやネットワークなどのインフラを提供するサービス<br>OSやミドルウェアなどを自分でインストールする分、カスタマイズがしやすい<br>セキュリティ対策なども自分でやる必要がある<br>AWSやGoogleComputeEngineなど</p><h3 id="Daas-Desktop-as-a-Service-ダース"><a href="#Daas-Desktop-as-a-Service-ダース" class="headerlink" title="Daas(Desktop as a Service)ダース"></a>Daas(Desktop as a Service)ダース</h3><p>クラウド上にデスクトップ環境を構築し、端末にインストールせずにネット経由で利用できるサービス(サーバー上で動作)<br>ユーザーはキーボードなど操作に必要な機能があればよい<br>Amazonworkspaceなど</p><h2 id="VPS-Virtual-Private-Server-との違い"><a href="#VPS-Virtual-Private-Server-との違い" class="headerlink" title="VPS(Virtual Private Server)との違い"></a>VPS(Virtual Private Server)との違い</h2><p>VPSとは仮想専用サーバーのことで、一台のサーバーで仮想的なサーバコンピュータを何台も起動できる<br>VPSはレンタルサーバーより自由度が高い、しかしクラウドのほうがさらに自由度が高い<br>IaaSは従量課金制(使った分だけ)に対してVPSは月額固定料金制</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/web2/web1.jpg&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;クラウド-クラウド・コンピューティング-とは&quot;&gt;&lt;a href=&quot;#クラウド-クラウド・コンピューティング-とは&quot; class=&quot;headerlink&quot; title=&quot;クラウド(クラウド・コンピューティング)とは&quot;&gt;&lt;/a&gt;クラウド(クラウド・コンピューティング)とは&lt;/h2&gt;&lt;p&gt;インターネットなどのネットワークを通じて、サービスを必要な時だけ利用すること&lt;br&gt;ソフトウェアやアプリケーションなどを自分で持っていなくても&lt;br&gt;利用できるのことをクラウドサービスという(インストールなどが必要ない)&lt;br&gt;例をあげると、GmailやGoogleドライブ、YouTubeなどもアップロードした動画を提供会社が保存、管理している&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>静的ウェブサイトホスティングサービス</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/blog2/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/blog2/</id>
    <published>2018-11-27T15:37:33.000Z</published>
    <updated>2018-12-03T07:42:54.604Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog2/web1.jpg" title="Image"><br><br></p><h2 id="ホスティングサービスとは"><a href="#ホスティングサービスとは" class="headerlink" title="ホスティングサービスとは"></a>ホスティングサービスとは</h2><p>簡単に言うと、サーバーを借りること<br>ホスティングサービスとはサーバの利用者自身でサーバの運営・管理をしなくてもいいように、有料または無料でサーバ機のHDDの記憶スペースや情報処理機能などを利用させるサービスのこと。サーバホスティング、または「レンタルサーバ」、「共用サーバ」とも呼ばれる<br>基本的には、ホームページ公開用のWebサーバやメールサーバとしての利用が多いが、データベースやグループウェアなどのWebアプリケーションでの利用も多い<br><a id="more"></a></p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://ja.wikipedia.org/wiki/%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%90" target="_blank" rel="noopener">ホスティングサーバ</a></p><h2 id="ホスティングサービスまとめ"><a href="#ホスティングサービスまとめ" class="headerlink" title="ホスティングサービスまとめ"></a>ホスティングサービスまとめ</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a><br><a href="https://docs.gitlab.com/ee/user/project/pages/" target="_blank" rel="noopener">GitLab Pages</a><br><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify(ネットリファイ)</a><br><a href="https://bitbucket.org/" target="_blank" rel="noopener">bitbucket</a><br><a href="https://aws.amazon.com/jp/s3/" target="_blank" rel="noopener">AWS S3</a><br><a href="https://firebase.google.com/docs/hosting/?hl=ja" target="_blank" rel="noopener">Firebase</a><br>などなどがあり、AWS以外は独自ドメインの設定とSSL対応が無料でできる</p><h3 id="レンタルサーバーまとめ"><a href="#レンタルサーバーまとめ" class="headerlink" title="レンタルサーバーまとめ"></a>レンタルサーバーまとめ</h3><p>ホスティングサービスとほぼ同じ意味で、基本料金が発生する<br><a href="https://www.xserver.ne.jp/" target="_blank" rel="noopener">エックスサーバー</a><br><a href="https://lolipop.jp/" target="_blank" rel="noopener">ロリポップ</a><br><a href="https://www.sakura.ne.jp/" target="_blank" rel="noopener">さくらサーバー</a><br>などなど</p><h2 id="Netlifyについて"><a href="#Netlifyについて" class="headerlink" title="Netlifyについて"></a>Netlifyについて</h2><p>使う可能性があるのでメモしておく<br>GitHubやGitLabのリポジトリと連携して、静的サイトを公開できる<br>独自ドメインやSSLなどが無料で、プッシュがあるとサイトを更新してくれる<br>NetlifyFormでフォーム設置ができる</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/blog2/web1.jpg&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;ホスティングサービスとは&quot;&gt;&lt;a href=&quot;#ホスティングサービスとは&quot; class=&quot;headerlink&quot; title=&quot;ホスティングサービスとは&quot;&gt;&lt;/a&gt;ホスティングサービスとは&lt;/h2&gt;&lt;p&gt;簡単に言うと、サーバーを借りること&lt;br&gt;ホスティングサービスとはサーバの利用者自身でサーバの運営・管理をしなくてもいいように、有料または無料でサーバ機のHDDの記憶スペースや情報処理機能などを利用させるサービスのこと。サーバホスティング、または「レンタルサーバ」、「共用サーバ」とも呼ばれる&lt;br&gt;基本的には、ホームページ公開用のWebサーバやメールサーバとしての利用が多いが、データベースやグループウェアなどのWebアプリケーションでの利用も多い&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="git" scheme="https://satoshi2222.github.io/myblog.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CMSと静的サイトジェネレーター</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/blog1/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/blog1/</id>
    <published>2018-11-27T11:30:55.000Z</published>
    <updated>2019-05-28T18:36:31.369Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog1/web1.jpg" title="Image"><br><br></p><h2 id="CMSとは"><a href="#CMSとは" class="headerlink" title="CMSとは"></a>CMSとは</h2><p>CMS(Contents Management System)は管理画面からホームページを更新できる<br>動的なHTMLで、ユーザーからのリクエストでDBからHTMLを生成する<br>有名なのがWordPressでデータベースが必要でセキュリティ面に不安がある</p><h2 id="静的サイトジェネレータとは"><a href="#静的サイトジェネレータとは" class="headerlink" title="静的サイトジェネレータとは"></a>静的サイトジェネレータとは</h2><p>Static Site GeneratorはJavaScriptのフレームワークをベースにしている<br>最初からhtmlを生成してからサーバーからhtmlを送るので、CMSのようにデータベースが必要なくて、サーバーがあればいいので、セキュリティ的に強い</p><a id="more"></a><h3 id="静的サイトジェネレーターのメリット"><a href="#静的サイトジェネレーターのメリット" class="headerlink" title="静的サイトジェネレーターのメリット"></a>静的サイトジェネレーターのメリット</h3><ul><li>GitHubPagesなどを使えば無料で作成できる</li><li>アクセス集中などの負荷に強い</li><li>すでに作成されているページを表示するので、表示が速い</li><li>ファイルなどをローカルに保存しているので、セキュリティ対策の必要がない</li></ul><h3 id="静的サイトジェネレーターのデメリット"><a href="#静的サイトジェネレーターのデメリット" class="headerlink" title="静的サイトジェネレーターのデメリット"></a>静的サイトジェネレーターのデメリット</h3><ul><li>Twitterなどのユーザー別のページを用意できない</li><li>ローカル保存のため複数での管理がしにくい</li><li>管理画面などがないため、ある程度の知識が必要</li><li>まだマイナーなものが多いので、情報が少ない</li></ul><h2 id="CMSまとめ"><a href="#CMSまとめ" class="headerlink" title="CMSまとめ"></a>CMSまとめ</h2><p><a href="https://ja.wordpress.org/" target="_blank" rel="noopener">WordPress</a><br><a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a><br><a href="https://www.drupal.org/" target="_blank" rel="noopener">Drupal</a></p><h2 id="静的サイトジェネレーターまとめ"><a href="#静的サイトジェネレーターまとめ" class="headerlink" title="静的サイトジェネレーターまとめ"></a>静的サイトジェネレーターまとめ</h2><p><a href="https://gohugo.io/" target="_blank" rel="noopener">HUGO</a><br><a href="https://jekyllrb-ja.github.io/" target="_blank" rel="noopener">jekyll</a><br><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a><br><a href="https://react-static.js.org/" target="_blank" rel="noopener">React Static</a><br><a href="https://vuejs.org/" target="_blank" rel="noopener">VuePress</a></p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://www.staticgen.com/" target="_blank" rel="noopener">StaticGen</a>ここにかなりの数の<br>静的サイトジェネレーターが載っている</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/blog1/web1.jpg&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;CMSとは&quot;&gt;&lt;a href=&quot;#CMSとは&quot; class=&quot;headerlink&quot; title=&quot;CMSとは&quot;&gt;&lt;/a&gt;CMSとは&lt;/h2&gt;&lt;p&gt;CMS(Contents Management System)は管理画面からホームページを更新できる&lt;br&gt;動的なHTMLで、ユーザーからのリクエストでDBからHTMLを生成する&lt;br&gt;有名なのがWordPressでデータベースが必要でセキュリティ面に不安がある&lt;/p&gt;
&lt;h2 id=&quot;静的サイトジェネレータとは&quot;&gt;&lt;a href=&quot;#静的サイトジェネレータとは&quot; class=&quot;headerlink&quot; title=&quot;静的サイトジェネレータとは&quot;&gt;&lt;/a&gt;静的サイトジェネレータとは&lt;/h2&gt;&lt;p&gt;Static Site GeneratorはJavaScriptのフレームワークをベースにしている&lt;br&gt;最初からhtmlを生成してからサーバーからhtmlを送るので、CMSのようにデータベースが必要なくて、サーバーがあればいいので、セキュリティ的に強い&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://satoshi2222.github.io/myblog.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="https://satoshi2222.github.io/myblog.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>EJS書き方</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/ejs/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/ejs/</id>
    <published>2018-11-25T21:45:59.000Z</published>
    <updated>2018-11-26T04:52:02.960Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/ejs/htmlcssjs.png" title="Image"><br><br></p><h2 id="EJSとは"><a href="#EJSとは" class="headerlink" title="EJSとは"></a>EJSとは</h2><p>JavaScriptのテンプレートエンジン<br>JavaScriptを使ってHTMLを生成できる(GulpやGruntなどのタスクランナーを使う)<br>Node.jsに入っていて、npminstallでインストールできる<br>各Webページで共通部分、headerなどのパーツをモジュールに分けてインクルードできる</p><a id="more"></a><h3 id="EJSをインストール"><a href="#EJSをインストール" class="headerlink" title="EJSをインストール"></a>EJSをインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs</span><br></pre></td></tr></table></figure><h3 id="EJS書き方"><a href="#EJS書き方" class="headerlink" title="EJS書き方"></a>EJS書き方</h3><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;% %&gt;"></a>&lt;% %&gt;</h4><p>基本的に&lt;% %&gt;のタグの中に処理を記述して、この中ではJavaSCriptが使える<br>出力をするわけではない</p><h4 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;%= %&gt;"></a>&lt;%= %&gt;</h4><p>変数などをhtmlで出力</p><h4 id="lt-gt-2"><a href="#lt-gt-2" class="headerlink" title="&lt;%- %&gt;"></a>&lt;%- %&gt;</h4><p>html要素を出力</p><h4 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h4><p>別のEJSファイルを読み込むことができる<br>第一引数に読み込むEJSファイルへの自ファイルからの相対パス(.ejsは省略)<br>第二引数にEJSに渡すパラメータを記述</p><p>などなど他にもあるので使う時に、検索して調べる</p><h2 id="メタ言語まとめ"><a href="#メタ言語まとめ" class="headerlink" title="メタ言語まとめ"></a>メタ言語まとめ</h2><p>Ruby製、PHP製、JavaScript製など、いろいろある</p><h3 id="HTMLメタ言語まとめ"><a href="#HTMLメタ言語まとめ" class="headerlink" title="HTMLメタ言語まとめ"></a>HTMLメタ言語まとめ</h3><p><a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a><br><a href="https://github.com/pugjs" target="_blank" rel="noopener">Pug（Jade）</a><br><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">Nunjucks</a><br><a href="http://www.swig.org/" target="_blank" rel="noopener">Swig</a></p><h3 id="CSSメタ言語-プリプロセッサ-まとめ"><a href="#CSSメタ言語-プリプロセッサ-まとめ" class="headerlink" title="CSSメタ言語(プリプロセッサ)まとめ"></a>CSSメタ言語(プリプロセッサ)まとめ</h3><p><a href="https://sass-lang.com/" target="_blank" rel="noopener">Sass(SCSS)</a><br><a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a><br><a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stulus</a></p><h3 id="JavaScriptメタ言語-AltJS-まとめ"><a href="#JavaScriptメタ言語-AltJS-まとめ" class="headerlink" title="JavaScriptメタ言語(AltJS)まとめ"></a>JavaScriptメタ言語(AltJS)まとめ</h3><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a><br><a href="https://coffeescript.org/" target="_blank" rel="noopener">CoffeeScript</a><br><a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a></p><h3 id="タスクランナーまとめ"><a href="#タスクランナーまとめ" class="headerlink" title="タスクランナーまとめ"></a>タスクランナーまとめ</h3><p><a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a><br><a href="https://gruntjs.com/" target="_blank" rel="noopener">Grunt</a><br><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>package.jsonに記述すれば利用できる<br><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener">Rollup</a><br>他にもまだまだある<br>多すぎるし、新しいものもまだ増える</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/ejs/htmlcssjs.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;EJSとは&quot;&gt;&lt;a href=&quot;#EJSとは&quot; class=&quot;headerlink&quot; title=&quot;EJSとは&quot;&gt;&lt;/a&gt;EJSとは&lt;/h2&gt;&lt;p&gt;JavaScriptのテンプレートエンジン&lt;br&gt;JavaScriptを使ってHTMLを生成できる(GulpやGruntなどのタスクランナーを使う)&lt;br&gt;Node.jsに入っていて、npminstallでインストールできる&lt;br&gt;各Webページで共通部分、headerなどのパーツをモジュールに分けてインクルードできる&lt;/p&gt;
    
    </summary>
    
    
      <category term="EJS" scheme="https://satoshi2222.github.io/myblog.github.io/tags/EJS/"/>
    
      <category term="html" scheme="https://satoshi2222.github.io/myblog.github.io/tags/html/"/>
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webフレームワークとは</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/web1/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/web1/</id>
    <published>2018-11-22T09:10:23.000Z</published>
    <updated>2018-11-22T10:48:50.907Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/web1/web1.jpg" title="Image"><br><br></p><h2 id="フレームワークとは"><a href="#フレームワークとは" class="headerlink" title="フレームワークとは"></a>フレームワークとは</h2><p>プログラミングにおいてのフレームワークは<br>アプリケーション開発で必要な機能をまとめてたり、開発を効率化してくれる機能を提供してくれるもの<br>フレームワークを導入することでルールが与えられるので業務遂行が円滑になり、用意された仕組みを利用できるので、<br>開発にかかる工数を短縮できる<br>簡単に言うとアプリの土台や動作をすべて自分で考えていたら、多くの時間とソースコードを用意しなければならなが、<br>アプリ開発に必要なものを最初から準備してくれているのがフレームワーク</p><a id="more"></a><h2 id="有名なフレームワーク"><a href="#有名なフレームワーク" class="headerlink" title="有名なフレームワーク"></a>有名なフレームワーク</h2><h3 id="PHPのフレームワーク"><a href="#PHPのフレームワーク" class="headerlink" title="PHPのフレームワーク"></a>PHPのフレームワーク</h3><p><a href="https://cakephp.org/jp" target="_blank" rel="noopener">CakePHP</a><br><a href="https://laravel.com/" target="_blank" rel="noopener">laravel</a></p><h3 id="Rudyのフレームワーク"><a href="#Rudyのフレームワーク" class="headerlink" title="Rudyのフレームワーク"></a>Rudyのフレームワーク</h3><p><a href="https://rubyonrails.org/" target="_blank" rel="noopener">Ruby on Rails</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="http://spring.io/" target="_blank" rel="noopener">Spring </a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="https://angularjs.org/" target="_blank" rel="noopener">AngularJS</a><br><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a></p><p>などなど、他にもたくさんある</p><h2 id="プラットフォーム"><a href="#プラットフォーム" class="headerlink" title="プラットフォーム"></a>プラットフォーム</h2><p>対象によって指す対象は変わる<br>OSやハードウェアなどを指すことが多い<br>Javaプラットフォームやnode.jsなど</p><h2 id="ライブラリ"><a href="#ライブラリ" class="headerlink" title="ライブラリ"></a>ライブラリ</h2><p>汎用性の高いプログラムをまとめたもの<br>自分で処理を書かなくてもライブラリで再利用可能<br>例を挙げるとjQueryなど<br>他の人が作ってくれた、関数やクラスを呼び出すということでいいのかな？？</p><h3 id="プラットフォームとライブラリの違い"><a href="#プラットフォームとライブラリの違い" class="headerlink" title="プラットフォームとライブラリの違い"></a>プラットフォームとライブラリの違い</h3><p>ライブラリ単体では処理が行わない、指示が必要<br>プラットフォームはいろいろなルールがあらかじめ決められていて、<br>単にimportやincludeしただけでは使えない場合が多い</p><p>知識が少なく深く理解できなかったので、表面的なことだけにしておく</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/web1/web1.jpg&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;フレームワークとは&quot;&gt;&lt;a href=&quot;#フレームワークとは&quot; class=&quot;headerlink&quot; title=&quot;フレームワークとは&quot;&gt;&lt;/a&gt;フレームワークとは&lt;/h2&gt;&lt;p&gt;プログラミングにおいてのフレームワークは&lt;br&gt;アプリケーション開発で必要な機能をまとめてたり、開発を効率化してくれる機能を提供してくれるもの&lt;br&gt;フレームワークを導入することでルールが与えられるので業務遂行が円滑になり、用意された仕組みを利用できるので、&lt;br&gt;開発にかかる工数を短縮できる&lt;br&gt;簡単に言うとアプリの土台や動作をすべて自分で考えていたら、多くの時間とソースコードを用意しなければならなが、&lt;br&gt;アプリ開発に必要なものを最初から準備してくれているのがフレームワーク&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"/>
    
      <category term="Web" scheme="https://satoshi2222.github.io/myblog.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>GitHubへSSHを使って通信</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/git3/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/git3/</id>
    <published>2018-11-20T20:16:29.000Z</published>
    <updated>2018-11-21T11:26:50.374Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/git3/gitlog1.png" title="Image"><br><br></p><h2 id="SSHとは"><a href="#SSHとは" class="headerlink" title="SSHとは"></a>SSHとは</h2><p>Secure Shellの略でリモートシェルに特化していて、リモートサーバに安全にログインしたり、<br>ファイルをセキュアに送受信することができる<br>SSHは暗号化通信を行う際の認証にパスワード認証を使うことができるが、<br>ユーザー名とパスワードが分かれば誰でもログインできてしまうので、<br>より安全な公開鍵認証という認証方法を使う<br>SSHはAndroidやiOSにも実装されているプロトコルのため、ネットワークにSSHの利用環境が整備されていれば、<br>スマートフォンやタブレットから容易にリモート接続が可能となる<br><a id="more"></a></p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://www.idcf.jp/words/ssh.html" target="_blank" rel="noopener">SSHとは</a></p><h3 id="公開鍵認証とは"><a href="#公開鍵認証とは" class="headerlink" title="公開鍵認証とは"></a>公開鍵認証とは</h3><p>公開鍵と秘密鍵という２つの情報を使う認証方法<br>公開鍵を、ログイン先のサーバーに登録し、それに対応した秘密鍵を持っている<br>クライアントだけが接続でき相手は公開鍵を使い情報を暗号化して、自分は秘密鍵を使って<br>情報を複合する</p><h2 id="公開鍵と秘密鍵の作成"><a href="#公開鍵と秘密鍵の作成" class="headerlink" title="公開鍵と秘密鍵の作成"></a>公開鍵と秘密鍵の作成</h2><p>コンソールに次のコマンドを入力<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></p><p>するとsshディレクトリが作成されて、中に公開鍵(id_rsa.pub)と秘密鍵(id _rsa)が作成されてる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/ts/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p><p>ファイル名はそのままでEnterキーを押す</p><p>次にパスワードを尋ねられる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br></pre></td></tr></table></figure></p><p>パスワードを入力してEnterを押す<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></p><p>もう一度パスワードを入力してEnterを押す<br>これで公開鍵と、秘密鍵が完成する</p><p>保存できているか確認するには、下記のコマンドで確認<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure></p><p>id_rsaという秘密鍵とid_rsa.pubという公開鍵が書かれているファイルを確認できれば、<br>鍵の生成ができている</p><h2 id="公開鍵を登録する"><a href="#公開鍵を登録する" class="headerlink" title="公開鍵を登録する"></a>公開鍵を登録する</h2><p>次のコマンドで公開鍵情報をコンソールに表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>実行結果をコピーしておく<br>次にGitHubにログインしてSettingsを開き、SSH and GPG keys を選択して、<br>New SSH key(add SHH key) をクリックする<br>Titleには自分が分かりやすい名前<br>Keyには先ほどコピーした情報を貼り付ける<br>Add key をクリックすると完了<br>これでGitHubとSSHを利用した通信が可能になる</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/git3/gitlog1.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;SSHとは&quot;&gt;&lt;a href=&quot;#SSHとは&quot; class=&quot;headerlink&quot; title=&quot;SSHとは&quot;&gt;&lt;/a&gt;SSHとは&lt;/h2&gt;&lt;p&gt;Secure Shellの略でリモートシェルに特化していて、リモートサーバに安全にログインしたり、&lt;br&gt;ファイルをセキュアに送受信することができる&lt;br&gt;SSHは暗号化通信を行う際の認証にパスワード認証を使うことができるが、&lt;br&gt;ユーザー名とパスワードが分かれば誰でもログインできてしまうので、&lt;br&gt;より安全な公開鍵認証という認証方法を使う&lt;br&gt;SSHはAndroidやiOSにも実装されているプロトコルのため、ネットワークにSSHの利用環境が整備されていれば、&lt;br&gt;スマートフォンやタブレットから容易にリモート接続が可能となる&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://satoshi2222.github.io/myblog.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>同期I/O 非同期I/O</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/node3/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/node3/</id>
    <published>2018-11-19T20:08:31.000Z</published>
    <updated>2018-11-21T11:07:45.302Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node3/nodelogo.png" title="Image"><br><br></p><h2 id="同期I-Oとは"><a href="#同期I-Oとは" class="headerlink" title="同期I/Oとは"></a>同期I/Oとは</h2><p>I/OとはIはInputでOはOutputの英語の頭文字を取ったもので、入出力処理のことで、<br>情報をInput(入力)して、処理結果をOutput(出力)するという流れ<br>多くのプログラミング言語ではI/O処理の間、プログラムを停止してI/O処理を待ち、このことを<br>同期I/Oといい、この処理の間、プログラムが停止することをブロッキングという<br>簡単に言うと今行っている処理が終わっていないなら、次の処理に手を付けないということ</p><h2 id="非同期I-Oとは"><a href="#非同期I-Oとは" class="headerlink" title="非同期I/Oとは"></a>非同期I/Oとは</h2><p>入出力の開始処理をしてもその終了を待たずに、待ち時間中に別の処理を実行すること<br>Node.jsは、マルチプロセスやマルチスレッドではなく、シングルスレッドでブロッキングしないで、効率化を図っている<br>非同期I/Oは処理が１つ終わってから、次の処理を行うことを保証していないので順不同になる性質がある<br>CPUを効率よく使用することができる<br>ノンブロッキングI/Oとは少し異なる点があるらしいが、今回は表面だけの理解にしておく</p><a id="more"></a><h3 id="マルチスレッド"><a href="#マルチスレッド" class="headerlink" title="マルチスレッド"></a>マルチスレッド</h3><p>一つのコンピュータプログラムを実行する際に、複数の処理の流れを並行して進めること<br>複数の処理の流れを生み出し、異なる処理を並行して進めることができる</p><h3 id="シングルスレッド"><a href="#シングルスレッド" class="headerlink" title="シングルスレッド"></a>シングルスレッド</h3><p>JavaScriptもNode.jsもシングルスレッドであり、デッドロックなどを気にしなくていいが、<br>一度に一つの処理しかできない<br>プログラムの処理の流れが一本のみである状態、並列処理などは行わず、一つの命令を実行していくこと</p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="http://e-words.jp/w/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89.html" target="_blank" rel="noopener">マルチスレッド</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/node3/nodelogo.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;同期I-Oとは&quot;&gt;&lt;a href=&quot;#同期I-Oとは&quot; class=&quot;headerlink&quot; title=&quot;同期I/Oとは&quot;&gt;&lt;/a&gt;同期I/Oとは&lt;/h2&gt;&lt;p&gt;I/OとはIはInputでOはOutputの英語の頭文字を取ったもので、入出力処理のことで、&lt;br&gt;情報をInput(入力)して、処理結果をOutput(出力)するという流れ&lt;br&gt;多くのプログラミング言語ではI/O処理の間、プログラムを停止してI/O処理を待ち、このことを&lt;br&gt;同期I/Oといい、この処理の間、プログラムが停止することをブロッキングという&lt;br&gt;簡単に言うと今行っている処理が終わっていないなら、次の処理に手を付けないということ&lt;/p&gt;
&lt;h2 id=&quot;非同期I-Oとは&quot;&gt;&lt;a href=&quot;#非同期I-Oとは&quot; class=&quot;headerlink&quot; title=&quot;非同期I/Oとは&quot;&gt;&lt;/a&gt;非同期I/Oとは&lt;/h2&gt;&lt;p&gt;入出力の開始処理をしてもその終了を待たずに、待ち時間中に別の処理を実行すること&lt;br&gt;Node.jsは、マルチプロセスやマルチスレッドではなく、シングルスレッドでブロッキングしないで、効率化を図っている&lt;br&gt;非同期I/Oは処理が１つ終わってから、次の処理を行うことを保証していないので順不同になる性質がある&lt;br&gt;CPUを効率よく使用することができる&lt;br&gt;ノンブロッキングI/Oとは少し異なる点があるらしいが、今回は表面だけの理解にしておく&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>npmとyarn</title>
    <link href="https://satoshi2222.github.io/myblog.github.io/node2/"/>
    <id>https://satoshi2222.github.io/myblog.github.io/node2/</id>
    <published>2018-11-18T08:51:22.000Z</published>
    <updated>2018-11-20T20:15:09.618Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node2/npmlog.png" title="Image"><br><br></p><h2 id="npmとは"><a href="#npmとは" class="headerlink" title="npmとは"></a>npmとは</h2><p>npm(Node Packaged Modules)とは、Node.jsのためのパッケージマネージャー<br>どのようなライブラリのパッケージがインストールされているかを記録し、インストールや削除が容易に行える<br>node.jsに標準で搭載されている</p><h3 id="パッケージとは"><a href="#パッケージとは" class="headerlink" title="パッケージとは"></a>パッケージとは</h3><p>様々な他のプログラムから利用できるように，汎用性の高いプログラムをまとめたものをライブラリといい、パッケージというのは，このライブラリをまとめて管理してくれる<br>パッケージの依存関係を管理してくれるので、手間が減る</p><a id="more"></a><h3 id="2種類のインストール"><a href="#2種類のインストール" class="headerlink" title="2種類のインストール"></a>2種類のインストール</h3><p>npmにはグローバルインストールとローカルインストールの２種類の方法がある<br>グローバルインストールは、実行環境自体もインストールし、<br>ローカルインストールは、現在のディレクトリでインストールする</p><h3 id="yarnとは"><a href="#yarnとは" class="headerlink" title="yarnとは"></a>yarnとは</h3><p>yarn(ヤーン)もNode.jsのためのパッケージマネージャー<br>npmの代わりに使えて、package.jsonの互換性がある<br>yarnはnpmと一緒に使えて、移行が楽で戻るのも簡単<br>インストールはキャッシュを利用するので早い</p><h2 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h2><p>npmを使いyarnをグローバルインストール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure></p><p>パッケージ開発の初期化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure></p><p>モジュールの追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add [パッケージ名]</span><br></pre></td></tr></table></figure></p><p>モジュールの削除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [パッケージ名]</span><br></pre></td></tr></table></figure></p><p><a href="https://yarnpkg.com/ja/" target="_blank" rel="noopener">yarn公式サイト</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/myblog.github.io/node2/npmlog.png&quot; title=&quot;Image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;npmとは&quot;&gt;&lt;a href=&quot;#npmとは&quot; class=&quot;headerlink&quot; title=&quot;npmとは&quot;&gt;&lt;/a&gt;npmとは&lt;/h2&gt;&lt;p&gt;npm(Node Packaged Modules)とは、Node.jsのためのパッケージマネージャー&lt;br&gt;どのようなライブラリのパッケージがインストールされているかを記録し、インストールや削除が容易に行える&lt;br&gt;node.jsに標準で搭載されている&lt;/p&gt;
&lt;h3 id=&quot;パッケージとは&quot;&gt;&lt;a href=&quot;#パッケージとは&quot; class=&quot;headerlink&quot; title=&quot;パッケージとは&quot;&gt;&lt;/a&gt;パッケージとは&lt;/h3&gt;&lt;p&gt;様々な他のプログラムから利用できるように，汎用性の高いプログラムをまとめたものをライブラリといい、パッケージというのは，このライブラリをまとめて管理してくれる&lt;br&gt;パッケージの依存関係を管理してくれるので、手間が減る&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://satoshi2222.github.io/myblog.github.io/tags/node-js/"/>
    
      <category term="npm" scheme="https://satoshi2222.github.io/myblog.github.io/tags/npm/"/>
    
      <category term="yarn" scheme="https://satoshi2222.github.io/myblog.github.io/tags/yarn/"/>
    
  </entry>
  
</feed>
