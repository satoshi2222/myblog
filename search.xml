<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JavaScriptでオブジェクトを使用する</title>
      <link href="/myblog.github.io/javascript2/"/>
      <url>/myblog.github.io/javascript2/</url>
      
        <content type="html"><![CDATA[<p><br><br><br><br></p><h2 id="オブジェクトとは"><a href="#オブジェクトとは" class="headerlink" title="オブジェクトとは"></a>オブジェクトとは</h2><p>複数のプロパティを持つデータのまとまりで、各種データまとめて、１つの変数として扱えるデータなので、その点は配列と同じ<br>配列や関数もオブジェクトである<br>オブジェクトのプロパティとは、そのオブジェクトの状態を表すもの<br>でキー(名前)と値から構成される<br>オブジェクトを値として記述する場合は、{}(オブジェクトリテラル)にプロパティ名と値をセットして記述する<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var object = &#123;</span><br><span class="line">    // キー: 値</span><br><span class="line">    &quot;key&quot;: &quot;value&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="ブラケット記法"></a>と.(ドット記法)を使ってプロパティにアクセスする<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(object.key); </span><br><span class="line">console.log(object[&quot;key&quot;]);</span><br></pre></td></tr></table></figure></p><h2 id="メソッド"><a href="#メソッド" class="headerlink" title="メソッド"></a>メソッド</h2><p>オブジェクトのプロパティに代入された関数<br>動作を指定する際に用いる処理<br>windowオブジェクトならalert()やopen()<br>console.logのlog()もメソッド</p><h2 id="DOM-Document-Object-Model-とは"><a href="#DOM-Document-Object-Model-とは" class="headerlink" title="DOM(Document Object Model)とは"></a>DOM(Document Object Model)とは</h2><p>xmlやhtmlの各要素にアクセスできて、操作できる仕様(API)<br>JavaScriptはHTMLがプラウザに読み込まれると、DOMオブジェクト(タグ、属性、値、文書)として、自動的に認識してくれる</p><h2 id="コンストラクタ関数"><a href="#コンストラクタ関数" class="headerlink" title="コンストラクタ関数"></a>コンストラクタ関数</h2><p>オブジェクトを生成できる<br>生成されたオブジェクトをインスタンスという<br>他言語のクラスに似ているようなもの<br>JavaScriptでオブジェクトを作る方法は、オブジェクト初期化子を使うか、コンストラクタからインスタンスを作成する２つがある<br>コンストラクタでは、thisを使いオブジェクトの定義する<br>同じプロパティを持つ複数のオブジェクトが、それぞれのプロパティの値が異なる場合に役に立つ</p><h3 id="オブジェクト初期化子"><a href="#オブジェクト初期化子" class="headerlink" title="オブジェクト初期化子"></a>オブジェクト初期化子</h3><p>new Object()、Object.create()、リテラル記法({}で囲む)の３つの方法でオブジェクトを初期化して、新たにオブジェクトを生成する方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScriptの関数について</title>
      <link href="/myblog.github.io/javascript1/"/>
      <url>/myblog.github.io/javascript1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/javascript1/htmlcssjs.png" title="Image"><br><br></p><h2 id="JavaScriptの関数とは"><a href="#JavaScriptの関数とは" class="headerlink" title="JavaScriptの関数とは"></a>JavaScriptの関数とは</h2><p>function(ファンクション)のことで、簡単な例ととして書くと<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 関数名()&#123;</span><br><span class="line">    処理内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>となる<br>よく使う処理を関数という形で定義して、使いたいとき呼び出せる<br>再利用ができて修正もしやすいメリットがある<br>次のように引数を渡すこともできる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function　関数名(引数)&#123;</span><br><span class="line">    処理内容</span><br><span class="line">    return 返り値;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="関数リテラル-無名関数"><a href="#関数リテラル-無名関数" class="headerlink" title="関数リテラル(無名関数)"></a>関数リテラル(無名関数)</h3><p>関数名をつけずに、関数を定義する<br>関数を変数に代入して、変数の記述で関数を実行する<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var 変数名 = function(引数1、引数2)&#123;</span><br><span class="line">    returan 引数1 + 引数2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>１度しか使わない場合や、名前を付ける必要のないもの、<br>名前空間を汚さないために使う</p><h3 id="即時関数"><a href="#即時関数" class="headerlink" title="即時関数"></a>即時関数</h3><p>作成して、即実行できる関数<br>無名関数を()で囲み、最後にも、()をつけることで実行できる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    //処理</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>引数や返り値を持つこともできる<br>使うメリットとしては、スコープ汚染を防ぐためで、閉じたスコープを作成できるので即時関数の中の変数はローカルな変数となる<br>ES6ではletやconstがあるのでそこまで使わないかもしれない</p><h3 id="アロー関数"><a href="#アロー関数" class="headerlink" title="アロー関数"></a>アロー関数</h3><p>ES6で導入された関数で、=&gt;を使って関数リテラルを記述する<br>functionを宣言する必要はなく、省略して書くことができる<br>returnするだけなら、returnとブロック({}のこと)を省略して書ける(一行だけの場合はreturnは自動で行われる)<br>引数が２つ以上なら引数に()がいるが引数が１つなら()を省略できる<br>引数が０なら空の丸括弧()がいる<br>コンストラクタ関数として使うことができない<br>宣言元(アロー関数が宣言された場所)のthisを参照する<br>その他色々とfunctionとの違いがあるが今回は表面だけにしておく</p><h2 id="クロージャ"><a href="#クロージャ" class="headerlink" title="クロージャ"></a>クロージャ</h2><p>クロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を ‘覚えています(コピペ)<br>簡単にいうとスコープの外にある変数を参照できるということ<br>テクニックなので、使わなければ出来ないというものではない<br>JavaSCriptは関数を入れ子にできるので、関数の中に他の関数を定義できるのと、JavaScriptの関数は定義時のコンテキスト(文脈)で実行されて、関数は定義時のコンテキストとは異なるコンテキスト上に持ち出されるとクロージャになるらしい<br>ほぼコピペなので、使う時に又詳しく調べることにする<br>参考リンク<br><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">クロージャ(MDN)</a><br><a href="analogic.jp/closure/">ANALOGIC</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>var/let/constの違い</title>
      <link href="/myblog.github.io/node5/"/>
      <url>/myblog.github.io/node5/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node5/nodelogo.png" title="Image"><br><br></p><h2 id="var-let-constについて"><a href="#var-let-constについて" class="headerlink" title="var/let/constについて"></a>var/let/constについて</h2><p>変数宣言のこと<br>varしかなかったが、ES2015でletとconstが追加された<br>varで宣言された場合関数スコープ(functionの中に書かれた変数)となるが、letとconstはブロックスコープとなる<br>varは変数の巻き上げ(ホイスティング)が起こるがletでが少し挙動が異なる？(あまり詳しく調べてない)<br>constとletがあるのでvarは積極的使うことはない<br><a id="more"></a></p><h3 id="ブロックスコープ"><a href="#ブロックスコープ" class="headerlink" title="ブロックスコープ"></a>ブロックスコープ</h3><p>{}で囲まれている部分のこと<br>varの場合だとfunction(){}がスコープとなっていたので<br>ifやforはスコープとならなかった<br>letで宣言された変数はforなどの中で閉じ込め、ループごとに固定される</p><h3 id="ローカル変数"><a href="#ローカル変数" class="headerlink" title="ローカル変数"></a>ローカル変数</h3><p>宣言した関数内でしか利用できない変数<br>functionのなかで宣言する</p><h3 id="グローバル変数"><a href="#グローバル変数" class="headerlink" title="グローバル変数"></a>グローバル変数</h3><p>プログラム全体、全てのスコープからアクセスできる変数</p><h3 id="letとconst"><a href="#letとconst" class="headerlink" title="letとconst"></a>letとconst</h3><p>基本的にはconstを使う<br>constは再代入不可で、再代入が必要な場合はletを使う</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node.jsの書き方</title>
      <link href="/myblog.github.io/node4/"/>
      <url>/myblog.github.io/node4/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node4/nodelogo.png" title="Image"><br><br></p><h2 id="node-jsの書き方"><a href="#node-jsの書き方" class="headerlink" title="node.jsの書き方"></a>node.jsの書き方</h2><h3 id="‘use-strict’"><a href="#‘use-strict’" class="headerlink" title="‘use strict’;"></a>‘use strict’;</h3><p>これを定義することにより、StrictModeが有効となる<br>これにより、より厳格なコードを書くことができてエラー発生を未然に防ぎやすくなる<br>定義されていない変数を禁止するなど、JavaやＣに近くなる<br>JavaScriptエンジンによる最適化処理を困難にする誤りを修正する<br>サポートしないブラウザもあるので注意<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br></pre></td></tr></table></figure></p><p>スクリプトの先頭以外に追加してもStrictモードにならない</p><p>参考リンク<br><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">Strictモード(MDN)</a></p><h2 id="require"><a href="#require" class="headerlink" title="require()"></a>require()</h2><p>mode.jsはデータベース、ネットワーク接続やファイルの操作が可能でライブラリを読み込むことができる<br>requireは外部ライブラリ、拡張機能を参照できる<br>node.jsはnpm(パッケージマネージャー)があり、これでインストールしたものは、<br>require()で読み込むことが可能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 変数名 = require(モジュール名)</span><br></pre></td></tr></table></figure></p><h2 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h2><p>モジュールを作る場合はexportsを使う<br>exports.メソッド名 = 変数などのように記述する<br>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var abc = 値</span><br><span class="line">exports.abc =abc</span><br></pre></td></tr></table></figure></p><p>これをrequireで読みだす</p><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>似ている書き方でmodule.exportがある<br>違いがあるらしいので使用する時にまた調べる</p><h2 id="node-jsのコアモジュール-API"><a href="#node-jsのコアモジュール-API" class="headerlink" title="node.jsのコアモジュール(API)"></a>node.jsのコアモジュール(API)</h2><p>コアモジュールとはnode.jsに標準で入っているモジュールのことで、<br>便利なものが多いのでよく使うものをメモしておく<br>基本的にrequireを使って呼び出す</p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>名前の通りHTTPの関連をまとめたもの<br>httpsもある<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="fs-FileSystem"><a href="#fs-FileSystem" class="headerlink" title="fs(FileSystem)"></a>fs(FileSystem)</h3><p>ファイルを操作するモジュール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="url-UniformResourceLocator"><a href="#url-UniformResourceLocator" class="headerlink" title="url(UniformResourceLocator)"></a>url(UniformResourceLocator)</h3><p>URLの文字列の解析、生成などができる<br>構文を解析することをパース(parse)という<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = require(&apos;url&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="util"><a href="#util" class="headerlink" title="util"></a>util</h3><p>util.formatやutil.inspectなど汎用なユーティリティを使える<br>いろいろあるので使う時に調べる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var util = require(&apos;util&apos;);</span><br></pre></td></tr></table></figure></p><p>参照<br><a href="https://nodejs.org/api/util.html" target="_blank" rel="noopener">Node.js v11.3.0 Documentation</a><br><a href="https://www.ibm.com/support/knowledgecenter/ja/SS9H2Y_7.5.0/com.ibm.dp.doc/util_js.html" target="_blank" rel="noopener">IBM</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>クラウドについて</title>
      <link href="/myblog.github.io/web2/"/>
      <url>/myblog.github.io/web2/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/web2/web1.jpg" title="Image"><br><br></p><h2 id="クラウド-クラウド・コンピューティング-とは"><a href="#クラウド-クラウド・コンピューティング-とは" class="headerlink" title="クラウド(クラウド・コンピューティング)とは"></a>クラウド(クラウド・コンピューティング)とは</h2><p>インターネットなどのネットワークを通じて、サービスを必要な時だけ利用すること<br>ソフトウェアやアプリケーションなどを自分で持っていなくても<br>利用できるのことをクラウドサービスという(インストールなどが必要ない)<br>例をあげると、GmailやGoogleドライブ、YouTubeなどもアップロードした動画を提供会社が保存、管理している</p><a id="more"></a><h2 id="クラウドの種類"><a href="#クラウドの種類" class="headerlink" title="クラウドの種類"></a>クラウドの種類</h2><p>クラウド幅広く色々な意味があり、利用する形により次のように分類される</p><h3 id="SaaS-Software-as-a-Service-サース"><a href="#SaaS-Software-as-a-Service-サース" class="headerlink" title="SaaS(Software as a Service)サース"></a>SaaS(Software as a Service)サース</h3><p>ネット経由でソフトウェア(Webサービス)を提供するサービス<br>ASP(Application Service Provider)と同意語<br>Gmail、GoogleMap、無料のブログサービスなど</p><h3 id="PaaS-Platform-as-a-Service-パース"><a href="#PaaS-Platform-as-a-Service-パース" class="headerlink" title="PaaS(Platform as a Service)パース"></a>PaaS(Platform as a Service)パース</h3><p>ネット経由でアプリケーションなどの開発環境を提供するサービス<br>インフラに加えてミドルウェア(DBなど)、プラットフォームなどを提供<br>GoogleAppEngineやMicrosoftAzureなど</p><h3 id="IaaS-Infrastructure-as-a-Service-イァース"><a href="#IaaS-Infrastructure-as-a-Service-イァース" class="headerlink" title="IaaS(Infrastructure as a Service)イァース"></a>IaaS(Infrastructure as a Service)イァース</h3><p>ネット経由で仮想マシンやネットワークなどのインフラを提供するサービス<br>OSやミドルウェアなどを自分でインストールする分、カスタマイズがしやすい<br>セキュリティ対策なども自分でやる必要がある<br>AWSやGoogleComputeEngineなど</p><h3 id="Daas-Desktop-as-a-Service-ダース"><a href="#Daas-Desktop-as-a-Service-ダース" class="headerlink" title="Daas(Desktop as a Service)ダース"></a>Daas(Desktop as a Service)ダース</h3><p>クラウド上にデスクトップ環境を構築し、端末にインストールせずにネット経由で利用できるサービス(サーバー上で動作)<br>ユーザーはキーボードなど操作に必要な機能があればよい<br>Amazonworkspaceなど</p><h2 id="VPS-Virtual-Private-Server-との違い"><a href="#VPS-Virtual-Private-Server-との違い" class="headerlink" title="VPS(Virtual Private Server)との違い"></a>VPS(Virtual Private Server)との違い</h2><p>VPSとは仮想専用サーバーのことで、一台のサーバーで仮想的なサーバコンピュータを何台も起動できる<br>VPSはレンタルサーバーより自由度が高い、しかしクラウドのほうがさらに自由度が高い<br>IaaSは従量課金制(使った分だけ)に対してVPSは月額固定料金制</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>静的ウェブサイトホスティングサービス</title>
      <link href="/myblog.github.io/blog2/"/>
      <url>/myblog.github.io/blog2/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog2/web1.jpg" title="Image"><br><br></p><h2 id="ホスティングサービスとは"><a href="#ホスティングサービスとは" class="headerlink" title="ホスティングサービスとは"></a>ホスティングサービスとは</h2><p>簡単に言うと、サーバーを借りること<br>ホスティングサービスとはサーバの利用者自身でサーバの運営・管理をしなくてもいいように、有料または無料でサーバ機のHDDの記憶スペースや情報処理機能などを利用させるサービスのこと。サーバホスティング、または「レンタルサーバ」、「共用サーバ」とも呼ばれる<br>基本的には、ホームページ公開用のWebサーバやメールサーバとしての利用が多いが、データベースやグループウェアなどのWebアプリケーションでの利用も多い<br><a id="more"></a></p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://ja.wikipedia.org/wiki/%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%90" target="_blank" rel="noopener">ホスティングサーバ</a></p><h2 id="ホスティングサービスまとめ"><a href="#ホスティングサービスまとめ" class="headerlink" title="ホスティングサービスまとめ"></a>ホスティングサービスまとめ</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a><br><a href="https://docs.gitlab.com/ee/user/project/pages/" target="_blank" rel="noopener">GitLab Pages</a><br><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify(ネットリファイ)</a><br><a href="https://bitbucket.org/" target="_blank" rel="noopener">bitbucket</a><br><a href="https://aws.amazon.com/jp/s3/" target="_blank" rel="noopener">AWS S3</a><br><a href="https://firebase.google.com/docs/hosting/?hl=ja" target="_blank" rel="noopener">Firebase</a><br>などなどがあり、AWS以外は独自ドメインの設定とSSL対応が無料でできる</p><h3 id="レンタルサーバーまとめ"><a href="#レンタルサーバーまとめ" class="headerlink" title="レンタルサーバーまとめ"></a>レンタルサーバーまとめ</h3><p>ホスティングサービスとほぼ同じ意味で、基本料金が発生する<br><a href="https://www.xserver.ne.jp/" target="_blank" rel="noopener">エックスサーバー</a><br><a href="https://lolipop.jp/" target="_blank" rel="noopener">ロリポップ</a><br><a href="https://www.sakura.ne.jp/" target="_blank" rel="noopener">さくらサーバー</a><br>などなど</p><h2 id="Netlifyについて"><a href="#Netlifyについて" class="headerlink" title="Netlifyについて"></a>Netlifyについて</h2><p>使う可能性があるのでメモしておく<br>GitHubやGitLabのリポジトリと連携して、静的サイトを公開できる<br>独自ドメインやSSLなどが無料で、プッシュがあるとサイトを更新してくれる<br>NetlifyFormでフォーム設置ができる</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CMSと静的サイトジェネレーター</title>
      <link href="/myblog.github.io/blog1/"/>
      <url>/myblog.github.io/blog1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/blog1/web1.jpg" title="Image"><br><br></p><h2 id="CMSとは"><a href="#CMSとは" class="headerlink" title="CMSとは"></a>CMSとは</h2><p>CMS(Contents Management System)は管理画面からホームページを更新できる<br>動的なHTMLで、ユーザーからのリクエストでDBからHTMLを生成する<br>有名なのがWordPressでデータベースが必要でセキュリティ面に不安がある</p><h2 id="静的サイトジェネレータとは"><a href="#静的サイトジェネレータとは" class="headerlink" title="静的サイトジェネレータとは"></a>静的サイトジェネレータとは</h2><p>Static Site GeneratorはJavaScriptのフレームワークをベースにしている<br>最初からhtmlを生成してからサーバーからhtmlを送るので、CMSのようにデータベースが必要なくて、サーバーがあればいいので、セキュリティ的に強い</p><a id="more"></a><h3 id="静的サイトジェネレーターのメリット"><a href="#静的サイトジェネレーターのメリット" class="headerlink" title="静的サイトジェネレーターのメリット"></a>静的サイトジェネレーターのメリット</h3><ul><li>GitHubPagesなどを使えば無料で作成できる</li><li>アクセス集中などの負荷に強い</li><li>すでに作成されているページを表示するので、表示が速い</li><li>ファイルなどをローカルに保存しているので、セキュリティ対策の必要がない</li></ul><h3 id="静的サイトジェネレーターのデメリット"><a href="#静的サイトジェネレーターのデメリット" class="headerlink" title="静的サイトジェネレーターのデメリット"></a>静的サイトジェネレーターのデメリット</h3><ul><li>Twitterなどのユーザー別のページを用意できない</li><li>ローカル保存のため複数での管理がしにくい</li><li>管理画面などがないため、ある程度の知識が必要</li><li>まだマイナーなものが多いので、情報が少ない</li></ul><h2 id="CMSまとめ"><a href="#CMSまとめ" class="headerlink" title="CMSまとめ"></a>CMSまとめ</h2><p><a href="https://ja.wordpress.org/" target="_blank" rel="noopener">WordPress</a><br><a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a><br><a href="https://www.drupal.org/" target="_blank" rel="noopener">Drupal</a></p><h2 id="静的サイトジェネレーターまとめ"><a href="#静的サイトジェネレーターまとめ" class="headerlink" title="静的サイトジェネレーターまとめ"></a>静的サイトジェネレーターまとめ</h2><p><a href="https://gohugo.io/" target="_blank" rel="noopener">HUGO</a><br><a href="https://jekyllrb-ja.github.io/" target="_blank" rel="noopener">jekyll</a><br><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a><br><a href="https://react-static.js.org/" target="_blank" rel="noopener">React Static</a><br><a href="https://vuejs.org/" target="_blank" rel="noopener">VuePress</a></p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><p><a href="https://www.staticgen.com/" target="_blank" rel="noopener">StaticGen</a>ここにかなりの数の<br>静的サイトジェネレーターが載っている</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EJS書き方</title>
      <link href="/myblog.github.io/ejs/"/>
      <url>/myblog.github.io/ejs/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/ejs/htmlcssjs.png" title="Image"><br><br></p><h2 id="EJSとは"><a href="#EJSとは" class="headerlink" title="EJSとは"></a>EJSとは</h2><p>JavaScriptのテンプレートエンジン<br>JavaScriptを使ってHTMLを生成できる(GulpやGruntなどのタスクランナーを使う)<br>Node.jsに入っていて、npminstallでインストールできる<br>各Webページで共通部分、headerなどのパーツをモジュールに分けてインクルードできる</p><a id="more"></a><h3 id="EJSをインストール"><a href="#EJSをインストール" class="headerlink" title="EJSをインストール"></a>EJSをインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs</span><br></pre></td></tr></table></figure><h3 id="EJS書き方"><a href="#EJS書き方" class="headerlink" title="EJS書き方"></a>EJS書き方</h3><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;% %&gt;"></a>&lt;% %&gt;</h4><p>基本的に&lt;% %&gt;のタグの中に処理を記述して、この中ではJavaSCriptが使える<br>出力をするわけではない</p><h4 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;%= %&gt;"></a>&lt;%= %&gt;</h4><p>変数などをhtmlで出力</p><h4 id="lt-gt-2"><a href="#lt-gt-2" class="headerlink" title="&lt;%- %&gt;"></a>&lt;%- %&gt;</h4><p>html要素を出力</p><h4 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h4><p>別のEJSファイルを読み込むことができる<br>第一引数に読み込むEJSファイルへの自ファイルからの相対パス(.ejsは省略)<br>第二引数にEJSに渡すパラメータを記述</p><p>などなど他にもあるので使う時に、検索して調べる</p><h2 id="メタ言語まとめ"><a href="#メタ言語まとめ" class="headerlink" title="メタ言語まとめ"></a>メタ言語まとめ</h2><p>Ruby製、PHP製、JavaScript製など、いろいろある</p><h3 id="HTMLメタ言語まとめ"><a href="#HTMLメタ言語まとめ" class="headerlink" title="HTMLメタ言語まとめ"></a>HTMLメタ言語まとめ</h3><p><a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a><br><a href="https://github.com/pugjs" target="_blank" rel="noopener">Pug（Jade）</a><br><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">Nunjucks</a><br><a href="http://www.swig.org/" target="_blank" rel="noopener">Swig</a></p><h3 id="CSSメタ言語-プリプロセッサ-まとめ"><a href="#CSSメタ言語-プリプロセッサ-まとめ" class="headerlink" title="CSSメタ言語(プリプロセッサ)まとめ"></a>CSSメタ言語(プリプロセッサ)まとめ</h3><p><a href="https://sass-lang.com/" target="_blank" rel="noopener">Sass(SCSS)</a><br><a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a><br><a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stulus</a></p><h3 id="JavaScriptメタ言語-AltJS-まとめ"><a href="#JavaScriptメタ言語-AltJS-まとめ" class="headerlink" title="JavaScriptメタ言語(AltJS)まとめ"></a>JavaScriptメタ言語(AltJS)まとめ</h3><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a><br><a href="https://coffeescript.org/" target="_blank" rel="noopener">CoffeeScript</a><br><a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a></p><h3 id="タスクランナーまとめ"><a href="#タスクランナーまとめ" class="headerlink" title="タスクランナーまとめ"></a>タスクランナーまとめ</h3><p><a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a><br><a href="https://gruntjs.com/" target="_blank" rel="noopener">Grunt</a><br><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>package.jsonに記述すれば利用できる<br><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener">Rollup</a><br>他にもまだまだある<br>多すぎるし、新しいものもまだ増える</p>]]></content>
      
      
      
        <tags>
            
            <tag> EJS </tag>
            
            <tag> html </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webフレームワークとは</title>
      <link href="/myblog.github.io/web1/"/>
      <url>/myblog.github.io/web1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/web1/web1.jpg" title="Image"><br><br></p><h2 id="フレームワークとは"><a href="#フレームワークとは" class="headerlink" title="フレームワークとは"></a>フレームワークとは</h2><p>プログラミングにおいてのフレームワークは<br>アプリケーション開発で必要な機能をまとめてたり、開発を効率化してくれる機能を提供してくれるもの<br>フレームワークを導入することでルールが与えられるので業務遂行が円滑になり、用意された仕組みを利用できるので、<br>開発にかかる工数を短縮できる<br>簡単に言うとアプリの土台や動作をすべて自分で考えていたら、多くの時間とソースコードを用意しなければならなが、<br>アプリ開発に必要なものを最初から準備してくれているのがフレームワーク</p><a id="more"></a><h2 id="有名なフレームワーク"><a href="#有名なフレームワーク" class="headerlink" title="有名なフレームワーク"></a>有名なフレームワーク</h2><h3 id="PHPのフレームワーク"><a href="#PHPのフレームワーク" class="headerlink" title="PHPのフレームワーク"></a>PHPのフレームワーク</h3><p><a href="https://cakephp.org/jp" target="_blank" rel="noopener">CakePHP</a><br><a href="https://laravel.com/" target="_blank" rel="noopener">laravel</a></p><h3 id="Rudyのフレームワーク"><a href="#Rudyのフレームワーク" class="headerlink" title="Rudyのフレームワーク"></a>Rudyのフレームワーク</h3><p><a href="https://rubyonrails.org/" target="_blank" rel="noopener">Ruby on Rails</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="http://spring.io/" target="_blank" rel="noopener">Spring </a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="https://angularjs.org/" target="_blank" rel="noopener">AngularJS</a><br><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a></p><p>などなど、他にもたくさんある</p><h2 id="プラットフォーム"><a href="#プラットフォーム" class="headerlink" title="プラットフォーム"></a>プラットフォーム</h2><p>対象によって指す対象は変わる<br>OSやハードウェアなどを指すことが多い<br>Javaプラットフォームやnode.jsなど</p><h2 id="ライブラリ"><a href="#ライブラリ" class="headerlink" title="ライブラリ"></a>ライブラリ</h2><p>汎用性の高いプログラムをまとめたもの<br>自分で処理を書かなくてもライブラリで再利用可能<br>例を挙げるとjQueryなど<br>他の人が作ってくれた、関数やクラスを呼び出すということでいいのかな？？</p><h3 id="プラットフォームとライブラリの違い"><a href="#プラットフォームとライブラリの違い" class="headerlink" title="プラットフォームとライブラリの違い"></a>プラットフォームとライブラリの違い</h3><p>ライブラリ単体では処理が行わない、指示が必要<br>プラットフォームはいろいろなルールがあらかじめ決められていて、<br>単にimportやincludeしただけでは使えない場合が多い</p><p>知識が少なく深く理解できなかったので、表面的なことだけにしておく</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHubへSSHを使って通信</title>
      <link href="/myblog.github.io/git3/"/>
      <url>/myblog.github.io/git3/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/git3/gitlog1.png" title="Image"><br><br></p><h2 id="SSHとは"><a href="#SSHとは" class="headerlink" title="SSHとは"></a>SSHとは</h2><p>Secure Shellの略でリモートシェルに特化していて、リモートサーバに安全にログインしたり、<br>ファイルをセキュアに送受信することができる<br>SSHは暗号化通信を行う際の認証にパスワード認証を使うことができるが、<br>ユーザー名とパスワードが分かれば誰でもログインできてしまうので、<br>より安全な公開鍵認証という認証方法を使う<br>SSHはAndroidやiOSにも実装されているプロトコルのため、ネットワークにSSHの利用環境が整備されていれば、<br>スマートフォンやタブレットから容易にリモート接続が可能となる<br><a id="more"></a></p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://www.idcf.jp/words/ssh.html" target="_blank" rel="noopener">SSHとは</a></p><h3 id="公開鍵認証とは"><a href="#公開鍵認証とは" class="headerlink" title="公開鍵認証とは"></a>公開鍵認証とは</h3><p>公開鍵と秘密鍵という２つの情報を使う認証方法<br>公開鍵を、ログイン先のサーバーに登録し、それに対応した秘密鍵を持っている<br>クライアントだけが接続でき相手は公開鍵を使い情報を暗号化して、自分は秘密鍵を使って<br>情報を複合する</p><h2 id="公開鍵と秘密鍵の作成"><a href="#公開鍵と秘密鍵の作成" class="headerlink" title="公開鍵と秘密鍵の作成"></a>公開鍵と秘密鍵の作成</h2><p>コンソールに次のコマンドを入力<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></p><p>するとsshディレクトリが作成されて、中に公開鍵(id_rsa.pub)と秘密鍵(id _rsa)が作成されてる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/ts/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p><p>ファイル名はそのままでEnterキーを押す</p><p>次にパスワードを尋ねられる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br></pre></td></tr></table></figure></p><p>パスワードを入力してEnterを押す<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></p><p>もう一度パスワードを入力してEnterを押す<br>これで公開鍵と、秘密鍵が完成する</p><p>保存できているか確認するには、下記のコマンドで確認<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure></p><p>id_rsaという秘密鍵とid_rsa.pubという公開鍵が書かれているファイルを確認できれば、<br>鍵の生成ができている</p><h2 id="公開鍵を登録する"><a href="#公開鍵を登録する" class="headerlink" title="公開鍵を登録する"></a>公開鍵を登録する</h2><p>次のコマンドで公開鍵情報をコンソールに表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>実行結果をコピーしておく<br>次にGitHubにログインしてSettingsを開き、SSH and GPG keys を選択して、<br>New SSH key(add SHH key) をクリックする<br>Titleには自分が分かりやすい名前<br>Keyには先ほどコピーした情報を貼り付ける<br>Add key をクリックすると完了<br>これでGitHubとSSHを利用した通信が可能になる</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同期I/O 非同期I/O</title>
      <link href="/myblog.github.io/node3/"/>
      <url>/myblog.github.io/node3/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node3/nodelogo.png" title="Image"><br><br></p><h2 id="同期I-Oとは"><a href="#同期I-Oとは" class="headerlink" title="同期I/Oとは"></a>同期I/Oとは</h2><p>I/OとはIはInputでOはOutputの英語の頭文字を取ったもので、入出力処理のことで、<br>情報をInput(入力)して、処理結果をOutput(出力)するという流れ<br>多くのプログラミング言語ではI/O処理の間、プログラムを停止してI/O処理を待ち、このことを<br>同期I/Oといい、この処理の間、プログラムが停止することをブロッキングという<br>簡単に言うと今行っている処理が終わっていないなら、次の処理に手を付けないということ</p><h2 id="非同期I-Oとは"><a href="#非同期I-Oとは" class="headerlink" title="非同期I/Oとは"></a>非同期I/Oとは</h2><p>入出力の開始処理をしてもその終了を待たずに、待ち時間中に別の処理を実行すること<br>Node.jsは、マルチプロセスやマルチスレッドではなく、シングルスレッドでブロッキングしないで、効率化を図っている<br>非同期I/Oは処理が１つ終わってから、次の処理を行うことを保証していないので順不同になる性質がある<br>CPUを効率よく使用することができる<br>ノンブロッキングI/Oとは少し異なる点があるらしいが、今回は表面だけの理解にしておく</p><a id="more"></a><h3 id="マルチスレッド"><a href="#マルチスレッド" class="headerlink" title="マルチスレッド"></a>マルチスレッド</h3><p>一つのコンピュータプログラムを実行する際に、複数の処理の流れを並行して進めること<br>複数の処理の流れを生み出し、異なる処理を並行して進めることができる</p><h3 id="シングルスレッド"><a href="#シングルスレッド" class="headerlink" title="シングルスレッド"></a>シングルスレッド</h3><p>JavaScriptもNode.jsもシングルスレッドであり、デッドロックなどを気にしなくていいが、<br>一度に一つの処理しかできない<br>プログラムの処理の流れが一本のみである状態、並列処理などは行わず、一つの命令を実行していくこと</p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="http://e-words.jp/w/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89.html" target="_blank" rel="noopener">マルチスレッド</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npmとyarn</title>
      <link href="/myblog.github.io/node2/"/>
      <url>/myblog.github.io/node2/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node2/npmlog.png" title="Image"><br><br></p><h2 id="npmとは"><a href="#npmとは" class="headerlink" title="npmとは"></a>npmとは</h2><p>npm(Node Packaged Modules)とは、Node.jsのためのパッケージマネージャー<br>どのようなライブラリのパッケージがインストールされているかを記録し、インストールや削除が容易に行える<br>node.jsに標準で搭載されている</p><h3 id="パッケージとは"><a href="#パッケージとは" class="headerlink" title="パッケージとは"></a>パッケージとは</h3><p>様々な他のプログラムから利用できるように，汎用性の高いプログラムをまとめたものをライブラリといい、パッケージというのは，このライブラリをまとめて管理してくれる<br>パッケージの依存関係を管理してくれるので、手間が減る</p><a id="more"></a><h3 id="2種類のインストール"><a href="#2種類のインストール" class="headerlink" title="2種類のインストール"></a>2種類のインストール</h3><p>npmにはグローバルインストールとローカルインストールの２種類の方法がある<br>グローバルインストールは、実行環境自体もインストールし、<br>ローカルインストールは、現在のディレクトリでインストールする</p><h3 id="yarnとは"><a href="#yarnとは" class="headerlink" title="yarnとは"></a>yarnとは</h3><p>yarn(ヤーン)もNode.jsのためのパッケージマネージャー<br>npmの代わりに使えて、package.jsonの互換性がある<br>yarnはnpmと一緒に使えて、移行が楽で戻るのも簡単<br>インストールはキャッシュを利用するので早い</p><h2 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h2><p>npmを使いyarnをグローバルインストール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure></p><p>パッケージ開発の初期化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure></p><p>モジュールの追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add [パッケージ名]</span><br></pre></td></tr></table></figure></p><p>モジュールの削除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [パッケージ名]</span><br></pre></td></tr></table></figure></p><p><a href="https://yarnpkg.com/ja/" target="_blank" rel="noopener">yarn公式サイト</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.jsとは</title>
      <link href="/myblog.github.io/node1/"/>
      <url>/myblog.github.io/node1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/node1/nodelogo.png" title="Image"><br><br></p><h2 id="Node-jsとは"><a href="#Node-jsとは" class="headerlink" title="Node.jsとは"></a>Node.jsとは</h2><ul><li>JavaScriptでプログラミングできる、フレームワークやライブラリではなくサーバサイドのプラットフォーム<br>  サーバーサイドとはサーバークライアント型のサービスのサーバ側のソフトウェアのこと</li></ul><a id="more"></a><ul><li><p>JavaScriptはブラウザ上で動きをつけるために開発されたプログラミング言語だが、サーバサイドでもJavaScriptを<br>  実行できるようにしてくれるのがNode.js<br>  PHPやJavaなどと同じような使い方ができるということだが、全く一緒ではない<br>  サーバも構築できるし、アプリケーションプログラムも動かせる</p></li><li><p>イベントループを採用している<br>  シングルスレッドでループ処理を回し、キューに溜まったイベントを処理していく方式<br>  リクエストを１つのスレッドで受け取ることができ,スレッドなどのリソース消費が少ない<br>  ブロッキングが発生すると、イベントループ全体がストップしてしまう問題を解決するのが、ノンブロッキングI/O</p></li><li><p>ノンブロッキングI/O（入出力）を採用している<br>  前の処理結果を待たずに他の処理を進めることができる<br>  単一のスレッドでも並列して処理できるようになっている<br>  LINE、Twitter、instagramのようなリアルタイムな反応が必要なWebの分野で活躍する</p></li></ul><p>色々調べたが、実際に利用しないと何が起こってるのか掴みにくいので、ここでは表面的な内容だけにしておく</p><h3 id="Node-jsのインストール-Windows版"><a href="#Node-jsのインストール-Windows版" class="headerlink" title="Node.jsのインストール(Windows版)"></a>Node.jsのインストール(Windows版)</h3><p><a href="https://nodejs.org/ja/" target="_blank" rel="noopener">Node.js</a>公式サイトにて,<br>ダウンロード Windows (x64)推奨版をクリック<br>後は画面にしたがってインストールしていく<br>カスタムインストール画面も追加したいものがなければ、そのままでいい<br>インストールが完了したら、確認するために新しくインストールされたNode.js command prompt起動して<br>バージョンを表示するコマンド<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>上記のコマンドを実行<br>インストールしたバージョンが表示されればインストール成功</p><h2 id="バージョン管理"><a href="#バージョン管理" class="headerlink" title="バージョン管理"></a>バージョン管理</h2><p>バージョン管理をするなら管理するツール(nodebrewやnodistなど)からnode.jsをインストールする<br>node.jsは日々さまざまな改善が行われ、今まで利用していた機能が、次のバージョンで使えなくなるということがある<br>そのようなことを防止するために現在のバージョンを明確にして、状況に応じてバージョンを変更することができる<br>管理ツールを導入する</p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 用語集</title>
      <link href="/myblog.github.io/git2/"/>
      <url>/myblog.github.io/git2/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/git2/gitlog1.png" title="Image"><br><br></p><h2 id="GitHub用語集"><a href="#GitHub用語集" class="headerlink" title="GitHub用語集"></a>GitHub用語集</h2><p>Gitでよく出てくる用語をメモしておく</p><a id="more"></a><h3 id="リポジトリ-Repository"><a href="#リポジトリ-Repository" class="headerlink" title="リポジトリ(Repository)"></a>リポジトリ(Repository)</h3><p>ソフトウェア開発において、ソースコードや開発に関わるデータをまとめて管理するためのデータの置き場のこと</p><h3 id="フォーク-Fork"><a href="#フォーク-Fork" class="headerlink" title="フォーク(Fork)"></a>フォーク(Fork)</h3><p>他人のリポジトリ(リモートリポジトリ)をコピーして、自分のリポジトリを作成すること</p><h3 id="コミット-Commit"><a href="#コミット-Commit" class="headerlink" title="コミット(Commit)"></a>コミット(Commit)</h3><p>リポジトリになにかしらの変更を入れること</p><h3 id="イシュー-Issue"><a href="#イシュー-Issue" class="headerlink" title="イシュー(Issue)"></a>イシュー(Issue)</h3><p>不具合や要求、その他の設計に関わることなどをイシューとしてまとめて、多くの人で議論するための機能</p><h3 id="ギスト-Gist"><a href="#ギスト-Gist" class="headerlink" title="ギスト(Gist)"></a>ギスト(Gist)</h3><p>メモやコードの断片を気軽に投稿して公開することができる機能</p><h3 id="ブランチ-branch"><a href="#ブランチ-branch" class="headerlink" title="ブランチ(branch)"></a>ブランチ(branch)</h3><p>ある時点のソースコードを分岐させて開発をしたもの<br>複数のメンバーが、同時に機能追加などを行ったりするため並行して行われる複数の機能追加やバージョン管理を支援する機能<br>masterブランチはデフォルトのブランチ</p><h3 id="ステージング-staging-とインデックス-index"><a href="#ステージング-staging-とインデックス-index" class="headerlink" title="ステージング(staging)とインデックス(index)"></a>ステージング(staging)とインデックス(index)</h3><p>いったん変更情報の登録すること<br>変更を保持している領域をインデックスという<br>ワークツリーにあるファイルをローカルリポジトリにコミットするためには、インデックスという場所に、コミット予定のファイルを記録する必要がある</p><h3 id="ワークツリー-working-tree"><a href="#ワークツリー-working-tree" class="headerlink" title="ワークツリー(working tree)"></a>ワークツリー(working tree)</h3><p>まだインデックスにステージングされていないファイル変更のこと<br>ローカル環境内のディレクトリのこと</p><h3 id="マージ-merge"><a href="#マージ-merge" class="headerlink" title="マージ(merge)"></a>マージ(merge)</h3><p>ブランチの間で変更情報を取り込むこと<br>リモートの更新情報をローカルに反映させる</p><h3 id="コンフリクト-Conflict"><a href="#コンフリクト-Conflict" class="headerlink" title="コンフリクト(Conflict)"></a>コンフリクト(Conflict)</h3><p>あるファイルの同じ行に対して、複数の人が別々の変更してしまいマージできないこと</p><h3 id="プルリクエスト-git-pull"><a href="#プルリクエスト-git-pull" class="headerlink" title="プルリクエスト(git pull)"></a>プルリクエスト(git pull)</h3><p>自分のフォークしたリポジトリから、変更差分をあなたのGitHubのリポジトリにpullしてください、という依頼のこと</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitとGitHub アカウント作成</title>
      <link href="/myblog.github.io/git1/"/>
      <url>/myblog.github.io/git1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/git1/gitlog1.png" title="Image"><br><br></p><h2 id="Gitとは"><a href="#Gitとは" class="headerlink" title="Gitとは"></a>Gitとは</h2><p>バージョン管理を行うソフトウェアのことで、バージョンとは、一度変更があるたびに更新される版名のこと<br>分散バージョン管理システムと呼ばれ,ローカル環境にリポジトリ(データの置き場)の複製が作成され、ローカル環境にもコードの変更履歴を保存することができる</p><h2 id="GitHubとは"><a href="#GitHubとは" class="headerlink" title="GitHubとは"></a>GitHubとは</h2><p>Gitの仕組みを利用して、ソースコードを共有することができるWebサービスで、基本的にすべて公開され,<br>だれでも自由にソースコードのコピーを作って、それを修正することができる</p><a id="more"></a><h2 id="GitHubのアカウント作成"><a href="#GitHubのアカウント作成" class="headerlink" title="GitHubのアカウント作成"></a>GitHubのアカウント作成</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>にアクセス<br>以下の３つの項目に情報を入力してSign up for GitHubをクリック</p><ul><li>Username {ハンドルネーム}</li><li>Email {メールアドレス}</li><li>Password {パスワード}</li></ul><p>Welcome to GitHubと書かれたページが表示されたらデフォルトのままContinueをクリックする</p><p>最後にアンケート画面が出てくるので、答えない場合はskip this step をクリックして飛ばしても大丈夫</p><p>登録に成功すると、登録したメールアドレスにメールが届くので、メールのVerify email addressをクリックすると登録完了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基本的なlinuxのコマンド</title>
      <link href="/myblog.github.io/linux/"/>
      <url>/myblog.github.io/linux/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/linux/Linux-logo.jpg" title="Image"><br><br></p><h2 id="よく使うコマンドを書いておく"><a href="#よく使うコマンドを書いておく" class="headerlink" title="よく使うコマンドを書いておく"></a>よく使うコマンドを書いておく</h2><p>馴染みの少ないコマンド操作なので、確認用にメモ</p><a id="more"></a><table><thead><tr><th>コマンド</th><th>結果</th></tr></thead><tbody><tr><td>pwd</td><td>現在のディレクトリの表示</td></tr><tr><td>ls</td><td>ファイル・ディレクトリの一覧の表示</td></tr><tr><td>cd</td><td>現在のディレクトリの変更</td></tr><tr><td>cd..</td><td>ひとつ前のディレクトリに戻る</td></tr><tr><td>cd ~</td><td>ホームディレクトリに移動 ~(チルダ)</td></tr><tr><td>mkdir</td><td>ディレクトリの作成</td></tr><tr><td>rm</td><td>ファイルやディレクトリの削除</td></tr><tr><td>cp</td><td>ファイルやディレクトリのコピー</td></tr><tr><td>mv</td><td>ファイルやディレクトリの移動</td></tr><tr><td>find</td><td>ファイルやディレクトリの検索</td></tr><tr><td>cat</td><td>複数のファイルの中身を結合して、標準出力に出力</td></tr><tr><td>less</td><td>ファイルの中身をページ送りしながら表示</td></tr><tr><td>grep</td><td>ファイルや標準入力の中から特定の単語を検索</td></tr></tbody></table><h2 id="オプション"><a href="#オプション" class="headerlink" title="オプション"></a>オプション</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br></pre></td></tr></table></figure><p>のように付け加えることでよりコマンドの付随機能を呼び出せる<br>種類はコマンドによって色々ある</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexoでnewpostのテンプレートを変更する</title>
      <link href="/myblog.github.io/hexo5/"/>
      <url>/myblog.github.io/hexo5/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/hexo5/hexo_pic.png" title="Image"><br><br></p><h2 id="Hexoでテンプレートを変更する場合はpost-mdを編集する"><a href="#Hexoでテンプレートを変更する場合はpost-mdを編集する" class="headerlink" title="Hexoでテンプレートを変更する場合はpost.mdを編集する"></a>Hexoでテンプレートを変更する場合はpost.mdを編集する</h2><ul><li>.mdファイルとはマークダウンドキュメントファイルとして使用されるテキストフ​​ァイル</li><li>scaffoldsフォルダにある</li><li>ドラフトを使ってる場合はdraft.mdを編集する</li></ul><a id="more"></a><h3 id="初期状態"><a href="#初期状態" class="headerlink" title="初期状態"></a>初期状態</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>###　カスタマイズ後<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% asset_img img.jpg Image %&#125;</span><br><span class="line"></span><br><span class="line">## タイトル</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 参考リンク</span><br><span class="line">[]()</span><br></pre></td></tr></table></figure></p><p>トップ画像を必ず使うのと参考リンクも多々乗せるので変更。</p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://azriton.github.io/2016/11/04/Hexo%E3%81%AE%E6%96%B0%E8%A6%8F%E6%8A%95%E7%A8%BF%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/" target="_blank" rel="noopener">Hexo の 新規投稿テンプレート を カスタマイズ</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cssでテキストを非表示にする</title>
      <link href="/myblog.github.io/csstext/"/>
      <url>/myblog.github.io/csstext/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/csstext/htmlcssjs.png" title="Image"><br><br></p><h2 id="要素を消さずに非表示にさせたい"><a href="#要素を消さずに非表示にさせたい" class="headerlink" title="要素を消さずに非表示にさせたい"></a>要素を消さずに非表示にさせたい</h2><p>まとめて消してしまうのではなく他のの要素は残しつつ、文字を非表示させる方法を探していたところ、解決方法があった</p><a id="more"></a><p>参考にさせていただいたサイト<br><a href="http://ss-complex.com/css-cleartext/" target="_blank" rel="noopener">CSSで文字テキストを非表示にする（隠す）方法</a></p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;text&quot;&gt;あいうえお&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text &#123;</span><br><span class="line">text-indent:100%;</span><br><span class="line">white-space:nowrap;</span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで文字を非表示にすることができる</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>５年前の情報なので、今は違うやり方がたくさんある可能性がある<br>情報を見つけ次第、追記していく</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cssのflexで中央に寄せつつ、最後の行は左寄せにする</title>
      <link href="/myblog.github.io/cssflex/"/>
      <url>/myblog.github.io/cssflex/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/cssflex/htmlcssjs.png" title="Image"><br><br></p><h2 id="justify-contentについて"><a href="#justify-contentについて" class="headerlink" title="justify-contentについて"></a>justify-contentについて</h2><p>justify-content: centerを使って中央に寄せると最後の行に余った要素があると<br>中央によってしまう<br>かといって初期値のflex-startだと全体が左寄せになってしまう<br>他の方法でも良いが、flexはとても便利なのでflexboxだけで解決する方法を探していくと、<br>解決法がネットにあった</p><a id="more"></a><p>参考にさせていただいたサイト<br><a href="https://qiita.com/QUANON/items/e14949abab3711ca8646" target="_blank" rel="noopener">Flexbox で全体を中央に配置しつつ最後の行を左揃えにする</a></p><p>解決方法としてはJavaScript (jQuery) を使い空の子要素で埋め、<br>左まで詰めるという方法</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;&quot; alt=&quot;&quot; width=”300”height=&quot;400&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  .wrap&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-flow: row wrap;</span><br><span class="line">  justify-content: center;</span><br><span class="line"></span><br><span class="line">.list.is-empty &#123;</span><br><span class="line">  width:300px;</span><br><span class="line">  height: 0;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">  margin-top: 0;</span><br><span class="line">  margin-bottom: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var $grid = $(&apos;.wrap&apos;),   </span><br><span class="line">    emptyCells = [],</span><br><span class="line">    i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; $grid.find(&apos;.list&apos;).length; i++) &#123;</span><br><span class="line">    emptyCells.push($(&apos;&lt;div&gt;&apos;, &#123; class: &apos;list is-empty&apos; &#125;));</span><br><span class="line">&#125;</span><br><span class="line">$grid.append(emptyCells);</span><br></pre></td></tr></table></figure><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>並べる数が変わっても、これで必要な空の部分を埋めてくれていて、余った長さの分は表示されていない<br>計算なしできれいに並べることができたが、cssだけでは不可能なのでjsを使わないのであれば,他の方法でやるほうが良い</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexoで記事を書く</title>
      <link href="/myblog.github.io/hexo4/"/>
      <url>/myblog.github.io/hexo4/</url>
      
        <content type="html"><![CDATA[<p><br></p><img src="/myblog.github.io/hexo4/hexo_pic.png" title="Image"><p><br></p><h2 id="MarkDownで記事を書く"><a href="#MarkDownで記事を書く" class="headerlink" title="MarkDownで記事を書く"></a>MarkDownで記事を書く</h2><p>簡単に書けて、尚且つ軽量でHTMLに変換してくれるフォーマット<br>基本的にMarkDown記法で書くがHexoが用意しているタグも使用できる </p><a id="more"></a><h2 id="MarkDownの書き方"><a href="#MarkDownの書き方" class="headerlink" title="MarkDownの書き方"></a>MarkDownの書き方</h2><h3 id="見出し"><a href="#見出し" class="headerlink" title="見出し"></a>見出し</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">### h4</span><br></pre></td></tr></table></figure><p>出力結果</p><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h3 id="リスト"><a href="#リスト" class="headerlink" title="リスト"></a>リスト</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- list</span><br><span class="line">    何か説明</span><br></pre></td></tr></table></figure><p>出力結果</p><ul><li>list<br>何か説明</li></ul><p>もしくは<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* list</span><br><span class="line">+ list</span><br></pre></td></tr></table></figure></p><p>でも良い</p><h3 id="番号付きリスト"><a href="#番号付きリスト" class="headerlink" title="番号付きリスト"></a>番号付きリスト</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. リスト１</span><br><span class="line">2. リスト２</span><br></pre></td></tr></table></figure><p>出力結果</p><ol><li>リスト1</li><li>リスト2</li></ol><h3 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[google](https://www.google.co.jp/)</span><br></pre></td></tr></table></figure><p>出力結果</p><p><a href="https://www.google.co.jp/" target="_blank" rel="noopener">google</a></p><h3 id="改行"><a href="#改行" class="headerlink" title="改行"></a>改行</h3><p>改行したい末尾に半角スペースを2スペース以上入れる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">あいうえお</span><br><span class="line">かきくけこ</span><br><span class="line"></span><br><span class="line">さしすせそ   </span><br><span class="line">たちつてと</span><br></pre></td></tr></table></figure></p><p>出力結果</p><p>あいうえお<br>かきくけこ</p><p>さしすせそ<br>たちつてと</p><p>直接brタグを書いてもできる</p><h3 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**あいうえお**</span><br></pre></td></tr></table></figure><p>出力結果</p><p><strong>あいうえお</strong></p><h3 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt](画像URL)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h4><p><a href="https://kojika17.com/2013/01/starting-markdown.html" target="_blank" rel="noopener">文章作成やメモ書きにも便利、Markdown記法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexoでプラグインを追加する</title>
      <link href="/myblog.github.io/hexo3/"/>
      <url>/myblog.github.io/hexo3/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/hexo3/hexo_pic.png" title="Image"><br><br></p><h2 id="必要なプラグインを追加する"><a href="#必要なプラグインを追加する" class="headerlink" title="必要なプラグインを追加する"></a>必要なプラグインを追加する</h2><p>基本的にプラグインが色々と揃っているので必要に応じてインストールしていく</p><a id="more"></a><h3 id="サイトマップを作成"><a href="#サイトマップを作成" class="headerlink" title="サイトマップを作成"></a>サイトマップを作成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="robots-txtを設置する"><a href="#robots-txtを設置する" class="headerlink" title="robots.txtを設置する"></a>robots.txtを設置する</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure><h3 id="RSSの設置する"><a href="#RSSの設置する" class="headerlink" title="RSSの設置する"></a>RSSの設置する</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="目次を設置する"><a href="#目次を設置する" class="headerlink" title="目次を設置する"></a>目次を設置する</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure><p>上記をインストールした後に記事に下記を記述するとh1などを読みだしてくれる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure></p><p>設定の変更は必要に応じてconfig.ymlを編集する</p><h2 id="その他の便利そうなプラグイン"><a href="#その他の便利そうなプラグイン" class="headerlink" title="その他の便利そうなプラグイン"></a>その他の便利そうなプラグイン</h2><ul><li>hexo-toc<br>  目次を生成</li><li>hexo-generator-archive<br>  アーカイブを生成</li><li>hexo-generator-category<br>  カテゴリーを生成</li><li>hexo-generator-tag<br>  タグを生成</li></ul><p>他にもかなりある様子</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexoで記事投稿</title>
      <link href="/myblog.github.io/hexo2/"/>
      <url>/myblog.github.io/hexo2/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/hexo2/hexo_pic.png" title="Image"><br><br></p><h2 id="Hexoの設定-記事投稿"><a href="#Hexoの設定-記事投稿" class="headerlink" title="Hexoの設定,記事投稿"></a>Hexoの設定,記事投稿</h2><p>テーマの変更や記事投稿はコマンド一つで簡単にできる</p><a id="more"></a><h2 id="記事を投稿する"><a href="#記事を投稿する" class="headerlink" title="記事を投稿する"></a>記事を投稿する</h2><p>記事の追加は hexo new postもしくはhexo newでできる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new 記事名</span><br></pre></td></tr></table></figure></p><p>これで/source/_posts/に.mdのファイルができる<br>.mdファイルを編集して記事をmarkdown方式で書く<br>下書きする場合 hexo new draft<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft</span><br></pre></td></tr></table></figure></p><h2 id="テーマを変更する"><a href="#テーマを変更する" class="headerlink" title="テーマを変更する"></a>テーマを変更する</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">HexoThemes</a>ここからテーマを選ぶ<br>100種類以上はある<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone</span><br></pre></td></tr></table></figure></p><p>上記のコマンドで好きなテーマをクローンする<br>直接ダウンロードしても大丈夫<br>そしてconfig.ymlのtheme:の名前をダウンロードしたものに変更する<br>下記は初期値<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure></p><p>テーマを変更すると必要なプラグインが違ったり仕様がそれぞれ違うので今回はやらない<br>(日本語情報少ない…)</p><h2 id="画像を表示する"><a href="#画像を表示する" class="headerlink" title="画像を表示する"></a>画像を表示する</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt](画像URL)</span><br></pre></td></tr></table></figure><p>上記はMarkDownの書き方だが<br>他のページで参照された時に表示されない場合<br>config.ymlの# Writingの項目post_asset_folderをtrueにする(デフォルト値はfalse)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p><p>Assetを有効にしたのでpostを作成したときに同じ名前のAssetフォルダができる<br>そこに画像を格納する<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 画像URL Image %&#125;</span><br></pre></td></tr></table></figure></p><p>上記のように打ち直しをすれば、画像が表示されるはず<br>だめならプラグインを入れて対処する</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexoをインストールする</title>
      <link href="/myblog.github.io/hexo1/"/>
      <url>/myblog.github.io/hexo1/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/hexo1/hexo_pic.png" title="Image"><br><br></p><h2 id="Hexoとは"><a href="#Hexoとは" class="headerlink" title="Hexoとは"></a>Hexoとは</h2><ul><li>静的サイトジェネレーターで簡単にシンプルなブログが作れる</li><li>プラグインも豊富で<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHubPages</a>などのサービスを使えば無料でサイトを作成できる</li><li>Markdownの記事書いて、記事の作成もコマンドから行える</li><li>node.js製なのでJavaScriptによる拡張が可能である</li><li>データベース不要で、ページの表示が速い</li><li>脱CMSで、WordPrssのような環境依存がない<br>このように色々あるが、簡単に言うとMarkdownで書かれたファイルなどからHTML/CSS/JSを生成してくれるというもので、似たようなツールとして<a href="https://jekyllrb-ja.github.io/" target="_blank" rel="noopener">Jekyll</a>や<a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a>などがある。</li></ul><a id="more"></a><h2 id="Hexoをインストール"><a href="#Hexoをインストール" class="headerlink" title="Hexoをインストール"></a>Hexoをインストール</h2><p>とりあえずgitで公開するので、gitとNode.jsが必要<br>gitでリポジトリ作成済なので<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>公式どおりにインストールする</p><h2 id="作業ディレクトリ作成"><a href="#作業ディレクトリ作成" class="headerlink" title="作業ディレクトリ作成"></a>作業ディレクトリ作成</h2><p>initでウェブサイト初期化、サイト用のフォルダを生成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init ディレクトリ名</span><br></pre></td></tr></table></figure></p><p>cd ディレクトリ名で移動して<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>これで、Hexoに必要なパッケージなどがインストールされる</p><h2 id="localで立ち上げて確認する"><a href="#localで立ち上げて確認する" class="headerlink" title="localで立ち上げて確認する"></a>localで立ち上げて確認する</h2><p>hexo serverでコマンド起動(hexo sでもよい)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>プラウザのアドレスバーに<a href="http://localhost:4000/と入力" target="_blank" rel="noopener">http://localhost:4000/と入力</a><br>これでサイトが確認できる<br>終了するときはCtrl+C</p><h2 id="gitにdeployする-公開できるように設定"><a href="#gitにdeployする-公開できるように設定" class="headerlink" title="gitにdeployする(公開できるように設定)"></a>gitにdeployする(公開できるように設定)</h2><p>_congig.ymlというファイルを編集する<br>拡張子ymlはyamlで構造化データの表現方法<br>各種設定ファイルなどで使う<br>公式サイトにgitを使う場合はhexo-deployer-gitをインストールしてと書いてあるので<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>これでgitに公開する機能がインストールされる</p><p>deployの項目の編集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git   </span><br><span class="line">  repo: repo: (githubのURLをそのまま貼り付ける)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>リポジトリ名に.github.ioをつけたほうがいいかもしれない</p><p>次にURLの項目の編集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://(ユーザーネーム).github.io/(リポジトリ名)/</span><br><span class="line">root: (リポジトリ名)</span><br></pre></td></tr></table></figure></p><p><em>サブドメインでやる場合はrootをしっかりと設定しないと正しく表示されない</em><br>独自ドメインを使用する場合は<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">GitHubHelp</a>などを見て設定する</p><h2 id="その他設定"><a href="#その他設定" class="headerlink" title="その他設定"></a>その他設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: (ブログ名)</span><br><span class="line">subtitle: (サブタイトル)</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: (名前)</span><br><span class="line">language: ja</span><br><span class="line">timezone: Asia/Tokyo</span><br></pre></td></tr></table></figure><h2 id="静的ファイルを生成して展開する"><a href="#静的ファイルを生成して展開する" class="headerlink" title="静的ファイルを生成して展開する"></a>静的ファイルを生成して展開する</h2><p>静的ファイル生成するコマンドはhexo generate<br>生成して展開する場合は<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy </span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure></p><p>次のいずれかのコマンドを実行する<br>両者に違いはない<br>上記のコマンドのショートカット<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure></p><p>これでさっき入力したアドレスにアクセスするとページが表示されるはず<br>(反映に時間がかかる場合がある)<br>deploy時にパスワードを聞かれるので、GitHubで設定したパスワードを入力する<br>更新する時もdeployする</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>はじめに</title>
      <link href="/myblog.github.io/about/"/>
      <url>/myblog.github.io/about/</url>
      
        <content type="html"><![CDATA[<p><br><br><img src="/myblog.github.io/about/top.jpg" title="Image"><br><br></p><h2 id="ブログを作る"><a href="#ブログを作る" class="headerlink" title="ブログを作る"></a>ブログを作る</h2><p>色々と知識を増やしたかったので、とりあえずブログを作ってみることに。<br>WordPressなどを使うことも考えたが、練習なので無料で済ましたいと思い<br>調べたところGitHub Pagesを使えば無料でブログを公開できることが分かったので、<br>静的サイトジェネレーターのHexoを使ってサイトを作成することにしてみました。</p><a id="more"></a><h2 id="WebMemoについて"><a href="#WebMemoについて" class="headerlink" title="WebMemoについて"></a>WebMemoについて</h2><p>分からないことを調べながらメモしていくサイトです。</p>]]></content>
      
      
      
        <tags>
            
            <tag> その他 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
