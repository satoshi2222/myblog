{"meta":{"title":"WebMemo","subtitle":"Webについて調べたことをメモ","description":"hexo git github node npm　とは","author":"webmemo","url":"https://satoshi2222.github.io/myblog.github.io"},"pages":[{"title":"このサイトについて","date":"2018-09-17T21:39:51.000Z","updated":"2018-09-17T23:43:54.393Z","comments":true,"path":"about/index.html","permalink":"https://satoshi2222.github.io/myblog.github.io/about/index.html","excerpt":"","text":"WebMemoについてこのサイトはWebに関する調べたことのメモをブログにしたものです。技術的なことは初心者なので、難しいことは調べてメモ代わりに記事にしていこうと思います。 環境OSはwindows10プラウザはChrome"}],"posts":[{"title":"Hugoをインストール","slug":"hugo1","date":"2019-06-06T12:39:21.000Z","updated":"2019-06-08T12:21:42.469Z","comments":true,"path":"hugo1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hugo1/","excerpt":"Hugoとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる GatsbyやHexoとは違いnode.js製ではない Go言語で作られている テーマが他の静的サイトジェネレーターより豊富 データベース不要で、ページの表示が速い","text":"Hugoとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる GatsbyやHexoとは違いnode.js製ではない Go言語で作られている テーマが他の静的サイトジェネレーターより豊富 データベース不要で、ページの表示が速い HugoのダウンロードHugo GitHubでZipファイルをダウンロードするwindowsの場合はWindows-64bit.zipか32bitの場合はそちらををクリック Hugoというフォルダを作成する今回はC:\\Hugo C:\\Hugoに\\binフォルダを作るbinフォルダに解凍した、hugo.exeをいれる C:\\Hugo\\binにパスを通しHugoをどこからでも使えるようにする今回はコマンドラインからではなく、GUIでパスを通す C:\\Hugo\\binをコピーする ［コントロールパネル］→［システムとセキュリティ］→［システム］→［システムの詳細設定］→[環境変数(N)] Pathとか書かれた欄を選択し、編集をクリック 新規をクリックして、先ほどコピーしたC:\\Hugo\\binを貼り付けるこれでパスが通る補足:何故かこの設定で通らず、not findと出たが、環境変数でこのパスの順番を一番上にしたらできるようになった Hugo公式のクイックスタート通りに進めていく1hugo version でインストールされているか確認 C:\\Hugo\\の場所で1hugo new site quickstart でサイトを作成する 1cd quickstart で移動する 123git initgit submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/anankeecho theme = &quot;ananke&quot; &gt;&gt; config.toml これでanankeというテーマを追加するechoでconfig.tomlにテーマannankeを追記する 1hugo new posts/my-first-post.md で記事を追加する 1hugo server -D でローカルサーバーを立ち上げるとサイトができているプラウザでhttp://localhost:1313/にアクセスすると見れる 公式サイト通りやってみたがエラーが出たhttp://localhost:1313/アクセスしたが画像が表示されなかったテーマを変えると設定が色々と変わり、Dirが違ったりするテーマのREADMEに、themeフォルダにあるexampleSiteフォルダのconfig.tomlや他のファイルをquickstarフォルダのconfig.tomlに上書きしてと書いてあるのでコピーするその後,config.tomlの5行目、themesDir = “../..”の記述を消してhttp://localhost:1313/を開くと画像が表示された 参考リンクHugo公式サイト","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"Hugo","slug":"Hugo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Hugo/"}]},{"title":"git initとgit push","slug":"git5","date":"2019-06-06T09:31:06.000Z","updated":"2019-06-08T13:02:54.271Z","comments":true,"path":"git5/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/git5/","excerpt":"git pushgit push とはローカルで開発したものをリモートリポジトリに変更を反映するためのコマンドGitHubでリポジトリを作成後手順通りpushしようとしたら、エラーや反映されてていないということが起こったのでメモしておく","text":"git pushgit push とはローカルで開発したものをリモートリポジトリに変更を反映するためのコマンドGitHubでリポジトリを作成後手順通りpushしようとしたら、エラーや反映されてていないということが起こったのでメモしておく ローカルリポジトリを作成するコマンドラインでローカルの作業フォルダに移動 git initコマンドでローカルリポジトリを作成1git init .gitというサブディレクトリが作成される git addコマンドでファイルをインデックスに追加(Gitの管理にいれる)1git add -A Gitのリポジトリでファイルを変更した場合、git commitコマンドで変更を登録する1git commit 変更したファイルだけコミットする場合は1git commit ファイル名 変更した全てコミットする場合は1git commit . -aをつければなにもかもコミットコマンドは git remoteコマンドでリモートリポジトリの情報をローカルに保存する1git remote add origin https://github.com/ユーザー名/リポジトリ名.git これでリモートに保存された1git remote -v で打ち込んだリポジトリが登録されているか確認できる git push origin masterコマンドで ローカルのmasterブランチをリモートリポジトリへ反映させる(正式にはgit push origin master:master)1git push origin master これでリモートリポジトリに反映される git push時にエラーremote: Permission to ユーザー名1/リポジトリ名 denied to ユーザー名2fatal: unable to access …… : The requested URL returned error: 403という文が出たどうやら複数のGitアカウントを使っている場合にユーザが混合してしまっているため、pushできないということとりあえずGUIでアカウント情報を修正してみる [コントロール］→ [パネル\\ユーザー］→ [アカウント\\資格情報マネージャー]へ移動 資格情報マネージャー”をクリック 一覧からgit:https://github.comをクリック 削除をクリックして情報を削除する もう一度Gitにコマンドで接続すると認証画面が出るので、使用するアカウント情報を入力すればpushできるようになる","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/git/"}]},{"title":"NetlifyとGatsbyJSを連携させる","slug":"gatsby2","date":"2019-05-29T07:15:11.000Z","updated":"2019-06-05T15:30:29.845Z","comments":true,"path":"gatsby2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/gatsby2/","excerpt":"NetlifyとはNetlifyは静的Webホスティングサービスで、GitHubやGitLAbなどと連携可能でGitHubなどで管理しておけば、Netlifyのサーバー上でHTMLに変換して公開してくれるAWSとは少し違いサーバー管理不要でコンテンツを用意するだけでサイトを公開できるURLも自動で割り当てられて、独自ドメインを設定することもできる無料のSSL/HTTPSを提供している無料枠はストレージ: 100GB、転送量: 100GB/月、リクエスト制限: 500 requests/分まで使用できる","text":"NetlifyとはNetlifyは静的Webホスティングサービスで、GitHubやGitLAbなどと連携可能でGitHubなどで管理しておけば、Netlifyのサーバー上でHTMLに変換して公開してくれるAWSとは少し違いサーバー管理不要でコンテンツを用意するだけでサイトを公開できるURLも自動で割り当てられて、独自ドメインを設定することもできる無料のSSL/HTTPSを提供している無料枠はストレージ: 100GB、転送量: 100GB/月、リクエスト制限: 500 requests/分まで使用できる Gatsbyで作成したものをGitのリポジトリに上げる GitHubでリポジトリを作成 プロジェクトのファイルで 12git initgit remote add origin https://github.com/ユーザー名/リポジトリ名.git GitHubにpush 12git commit -m &quot;first commit&quot;git push -u origin master リポジトリで反映されているか確認 Netlifyを使ってサイトを作成する NetlifyにアクセスGet started for freeをクリック アカウント作成GitHub、GitLab、Bitbucketとのアカウント連携するか、e-mailでアカウント登録できる今回はGitHubを使うのでGitHubをクリックして、Gatsbyで作ったものをGitHubに上げたリポジトリ名を入力する案内される通りにボタンを押していく Build CommandとPublish directoryこの入力欄ではデプロイ時のコマンドを設定できるので、npm run buildと設定するbranchはmasterで公開するディレクトリはpublishを入力する 以上で設定完了名前がつけられ対応するURLをクリックするとサイトが出来上がっている","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"gatsby","slug":"gatsby","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/gatsby/"},{"name":"Netlify","slug":"Netlify","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Netlify/"}]},{"title":"GatsbyJSをインストール","slug":"gatsby1","date":"2019-05-28T18:03:42.000Z","updated":"2019-06-05T10:42:13.253Z","comments":true,"path":"gatsby1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/gatsby1/","excerpt":"GatsbyJSとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる ReactJSを使っている Markdownの記事書いて、記事の作成もコマンドから行える node.js環境で動く SPA(Single Page Application)が作れる データベース不要で、ページの表示が速い GraphQLを使っている (starter)スターターが容易されていて、予め必要物がそろっているので色々なスターターを使えば自分好みにカスタマイズできるこのように色々あるが、Hexoと同じような技術","text":"GatsbyJSとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる ReactJSを使っている Markdownの記事書いて、記事の作成もコマンドから行える node.js環境で動く SPA(Single Page Application)が作れる データベース不要で、ページの表示が速い GraphQLを使っている (starter)スターターが容易されていて、予め必要物がそろっているので色々なスターターを使えば自分好みにカスタマイズできるこのように色々あるが、Hexoと同じような技術 スタータとプラグインのリンクstarterplugin GraphQL(グラフキューエル)とは Facebookが開発したAPI用のクエリ言語 サーバとのデーターのやり取りする記述 Gatsbyはデータ取得にこれを使用している WebAPIとはオンライン上で使えるアプリケーション(instagramなど) REST(REpresentational State Transfer )とよく比較される ReactJS(リアクト)とはReact(公式ホームページ) JavaScriptのフレームワークではなく、UIを作るためのライブラリ 画面の表示が速い Facebookが開発でFacebookやInstagramなどに使われている UIを作りやすい Virtual DOM(仮想DOM) JavaScriptのコードの中にHTMLタグを記述できる(JSX) GatsbyをインストールするNode.jsが必要なのでインストールしておく1npm install --global gatsby-cli 公式どおりにインストールする 以下のコマンドでバージョンを確認 1gatsby --version 表示されれば無事インストールされる プロジェクトを作成1gatsby new blog これでblogというフォルダに色々キットが保存されるcd ディレクトリ名で移動して1gatsby develop を入力するとhttp://localhost:8080/にGatsbyが立ち上がる node.jsが最新版でなかったためか、エラーが出たので注意する 参考リンクGatsbyJS公式","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"gatsby","slug":"gatsby","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/gatsby/"}]},{"title":"Google Analytics 使い方","slug":"blog4","date":"2019-05-03T14:41:34.000Z","updated":"2019-05-28T19:15:46.885Z","comments":true,"path":"blog4/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/blog4/","excerpt":"","text":"Google Analytics とはGoogle Analytics(アナリティクス)はGoogleが用意した、無料で使えるツールで、アクセスの解析ができます簡単に言うと、訪問者数、滞在時間、どこから来たか、広告クリック数と収益、使用デバイスなどのデータを入手できるデータ計測のためにJavaScriptのコードを組み込むスマホユーザーが多いかどうかや、訪問前のサイトを知ることで行動パターンを把握することができる Google Analytics 登録登録にはGoogleアカウントが必要なので事前に作るGoogle Analyticsにアクセスして、無料で利用するをクリックする用意したアカウントでログインする初めての場合はお申込みボタンを押す新しいアカウントの入力画面で必要な情報を入力メニューの管理からトラッキング情報のウェブサイトのトラッキングという項目でトラッキングコードをコピーして自分のサイトのHTMLファイルの＜/head＞ 終了タグの前に貼り付けるこれで登録と設置完了 用語まとめセッションユーザーの訪問回数 ユーザー訪問者数(cookie情報をもとに判別) ページビュー数(PV数)閲覧されたページの合計数 直帰率１ページだけ訪れて離脱した場合カウントされる トラフィックユーザーがどこから来たのかを表示する 参考リンクGoogleアナリティクス","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"web","slug":"web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/web/"}]},{"title":"Google Search Console 使い方","slug":"blog3","date":"2019-04-24T08:23:03.000Z","updated":"2019-05-27T10:42:04.089Z","comments":true,"path":"blog3/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/blog3/","excerpt":"Google Search Console とはSearch ConsoleはGoogleが用意した、無料で使えるツールで、サイトの検索トラフィックや掲載順位を測定できる簡単に言うと、サイトにエラーが出ていないか,サイトの表示回数、検索順位、訪問ユーザーが検索したワードやクリック数など確認できるSEOの対策をする上でGoogleのガイドラインに適しているかどうかも大事なので、Webサイトを運営するなら必要なツール","text":"Google Search Console とはSearch ConsoleはGoogleが用意した、無料で使えるツールで、サイトの検索トラフィックや掲載順位を測定できる簡単に言うと、サイトにエラーが出ていないか,サイトの表示回数、検索順位、訪問ユーザーが検索したワードやクリック数など確認できるSEOの対策をする上でGoogleのガイドラインに適しているかどうかも大事なので、Webサイトを運営するなら必要なツール Search Console 登録登録にはGoogleアカウントが必要なので事前に作るGoogle Search Consoleにアクセスして、今すぐ開始をクリック用意したアカウントでログイン、プロパティを追加から自分のサイトのURLを貼り付けて追加をクリック別の方法でHTMLタグにチェックをいれて、コードをコピーして自分のサイトのheadタグに埋め込み、アップロードが終われば確認で登録が完了 用語まとめ合計クリック数検索結果に出た自分のサイトやページがクリックされた回数 合計表示回数検索結果に表示された回数 平均CTRClick Through Rate(クリックスルーレート)の略でクリック率とも呼ばれる表示回数をクリック数で割った数 平均掲載順位検索キーワードの平均順位をグラフで確認することができる指標ですが、Googleが2019年9月に提供を停止するとのことなので、別の指標を利用する必要がある 参考リンクSearch Console ヘルプ","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"web","slug":"web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/web/"}]},{"title":"GitHubが無料でプライベートリポジトリを作れるように","slug":"git4","date":"2019-02-11T21:05:25.000Z","updated":"2019-02-11T21:56:04.044Z","comments":true,"path":"git4/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/git4/","excerpt":"GitHub プラン内容の変更GitHubニュース記事 今までは無料ユーザーはコードを公開する必要があったもし非公開にするならば、有料プランを選択しなければならなかったが１月８日のアップデートにより、その制限はなくなった最大3人の共同編集者と無制限にプライベート構成できるようになった","text":"GitHub プラン内容の変更GitHubニュース記事 今までは無料ユーザーはコードを公開する必要があったもし非公開にするならば、有料プランを選択しなければならなかったが１月８日のアップデートにより、その制限はなくなった最大3人の共同編集者と無制限にプライベート構成できるようになった GitHubのプランの違いGitHubプラン ダウングレードの方法 GitHubのSettingsをクリック Billingをクリック Downgrade to freeをクリック I understand. をクリック フリーに移行できない、リポジトリがある場合はエラーがでる リポジトリを非公開に変更 非公開にしたいリポジトリを開く Settingをクリック Danger Zoneという赤い部分に移動する Make privateをクリック 後は指示通りに入力すれば完了 リポジトリ名に鍵アイコンがついていれば成功","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/git/"}]},{"title":"node.jsでwebサーバーを作成","slug":"node6","date":"2018-12-20T15:00:16.000Z","updated":"2019-02-11T20:54:58.803Z","comments":true,"path":"node6/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node6/","excerpt":"簡単なwebサーバーの作り方1234567891011//server.jsvar http = require(&apos;http&apos;);var server = http.createServer();server.on(&apos;request&apos;, doRequest);function doRequest(req, res) &#123; res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;); res.write(&quot;Hello World! sever-&quot;); res.end();&#125;server.listen(3000, &apos;127.0.0.1&apos;);console.log(&quot;server runnnig&quot;);","text":"簡単なwebサーバーの作り方1234567891011//server.jsvar http = require(&apos;http&apos;);var server = http.createServer();server.on(&apos;request&apos;, doRequest);function doRequest(req, res) &#123; res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;); res.write(&quot;Hello World! sever-&quot;); res.end();&#125;server.listen(3000, &apos;127.0.0.1&apos;);console.log(&quot;server runnnig&quot;); 解説var http = require(‘http’);HTTP関連の機能が入っているvar server = http.createServer();httpのサーバー作成する関数server.on(‘request’, doRequest).listen(8080, ‘127.0.0.1’);onメソッドは第１引数にイベント名、第２引数に処（関数）requestはクライアントからのリクエストを受け取ったときに発生するイベントプラウザからサーバーにアクセスした時のサーバー側の処理で、requestが発生するとコールバック関数を呼び出すlistenメソッドは外部からリクエストを受け付けるポート番号を指定できる第１引数にポート番号、第2引数: IPアドレスを指定writeHeadは第1引数にステータスコード、第2引数にその他のヘッダーのキーと値を送信するwriteはレスポンスを送信するendはレスポンスの送信を終了する サーバーを立ち上げる上記のjsファイルを1node ファイル名 などで実行して、http://localhost:3000 にアクセスしてみるとHello world!と書かれたページが表示される","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/web/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"},{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"SPAについて","slug":"javascript4","date":"2018-12-11T23:42:28.000Z","updated":"2018-12-12T11:14:00.674Z","comments":true,"path":"javascript4/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/javascript4/","excerpt":"SPAとはSinglePageApplicationの略で単一のページでコンテンツの切り替えを行うWebアプリケーションのことユーザーのアクションに対して必要なデータだけサーバーに要求してページ全体ではなく、一部分だけを差し替えて、コンテンツを表示する","text":"SPAとはSinglePageApplicationの略で単一のページでコンテンツの切り替えを行うWebアプリケーションのことユーザーのアクションに対して必要なデータだけサーバーに要求してページ全体ではなく、一部分だけを差し替えて、コンテンツを表示する初回のみおページ全体をロードして、次からはサーバーからJSONデータを受け取ってリロードするSPAにおける主要な技術はAjaxでjQueryの登場でより広く使われるようになったjQueryでも可能だが、DOM操作などに限界があり、代わりにAngularJSやReactやVue.jsといったSPA向けのフレームワークを使用する例を挙げると、FacebookやGoogleMapやSlackなど AjaxとはAjax(エイジャックス)はAsynchronous JavaScript XMLの略で、JavaScriptとXMLを使って非同期にサーバーと通信を行うことウェブブラウザ内で非同期通信を行いながらインターフェイスの構築を行うプログラミング手法node.jsの登場でサーバ側におけるデータ形式変換の必要なしに、Ajaxを実現できる環境が整い始めている(wikipedeia引用)[https://ja.wikipedia.org/wiki/Ajax] JSONとはJavaScriptObjectNotationの略で軽量のデータ交換フォーマット人間にとって読み書きが容易で、マシンにとっても簡単にパースや生成を行なえる形式 PWAとはProgressiveWebAppsの略で、モバイル向けWebサイトをGooglePlayストアなどでみかけるアプリ(ネイティブアプリ)のように使える仕組みのことレスポンスが向上してユーザーインストールさせることがなく、オフラインでのコンテンツ利用が可能プッシュ通知の受信やストアの審査なくアップデートが可能 WEBページをPWAにするには特定のフレームワークなどは必要なく、Googleが策定した(Progressive Web App Checklist)[https://developers.google.com/web/progressive-web-apps/checklist]に沿って開発すればいいGoogleが推奨していて、Googleが開発キットも用意している AMPとはAMP(アンプ)とはAccelerated Mobile Pagesの略で、GoogleとTwitterが共同で立ち上げたオープンソースプロジェクトモバイル端末でホームページを高速で表示させるための仕組み通常はWebページにアクセスする場合、クリックに応じてサーバからHTMLなどを読み込むが、AMPに対応しているページは、あらかじめGoogleなどのサーバーにキャッシュすることで、読み込み時間を削減している(導入ガイド)[https://webmaster-ja.googleblog.com/2016/01/accelerated-mobile-pages.html]","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"},{"name":"Web","slug":"Web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Web/"},{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"JavaScriptのデータ型","slug":"javascript3","date":"2018-12-11T20:49:13.000Z","updated":"2018-12-11T22:05:37.971Z","comments":true,"path":"javascript3/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/javascript3/","excerpt":"データ型とはデータの種類で、JavaScriptで扱うデータは、文字列の場合もあれば、数値の場合もあるtrueなども含まれる値はいずれかのデータ型に属することになり、それぞれできることが異なる","text":"データ型とはデータの種類で、JavaScriptで扱うデータは、文字列の場合もあれば、数値の場合もあるtrueなども含まれる値はいずれかのデータ型に属することになり、それぞれできることが異なる データ型はリテラルという表記ができるリテラルとはプログラム上に直接書かれた数値や文字列のことデータ型には以下のように、プリミティブ型とオブジェクト型に分けられる プリミティブ型プリミティブとはプロパティとメソッドを持たないデータのこと Number型(数値)JavaScriptにおいては数値は全て浮動小数点数として扱われる(全て数値型) String型(文字)文字列リテラルは””や’’のクォートで囲む Boolean型(真偽)trueとfalseの２つのみ Undefined型変数の値が未定義を示す値 Null型参照するものがない状態 Symbol型(シンボル型)変数 = Symbol()と書いて生成でき、不変なプリミティブ値 オブジェクト型 Object typeof演算子対象の値のデータ型を表す文字列を返す演算子なので、変数の型を知るのに役立つ","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"}]},{"title":"JavaScriptでオブジェクトを使用する","slug":"javascript2","date":"2018-12-11T10:26:04.000Z","updated":"2018-12-11T22:28:54.242Z","comments":true,"path":"javascript2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/javascript2/","excerpt":"オブジェクトとは複数のプロパティを持つデータのまとまりで、各種データまとめて、１つの変数として扱えるデータなので、その点は配列と同じ配列や関数もオブジェクトである","text":"オブジェクトとは複数のプロパティを持つデータのまとまりで、各種データまとめて、１つの変数として扱えるデータなので、その点は配列と同じ配列や関数もオブジェクトであるオブジェクトのプロパティとは、そのオブジェクトの状態を表すものでキー(名前)と値から構成されるオブジェクトを値として記述する場合は、{}(オブジェクトリテラル)にプロパティ名と値をセットして記述する1234var object = &#123; // キー: 値 &quot;key&quot;: &quot;value&quot;&#125;; と.(ドット記法)を使ってプロパティにアクセスする12console.log(object.key); console.log(object[&quot;key&quot;]); メソッドオブジェクトのプロパティに代入された関数動作を指定する際に用いる処理windowオブジェクトならalert()やopen()console.logのlog()もメソッド DOM(Document Object Model)とはxmlやhtmlの各要素にアクセスできて、操作できる仕様(API)JavaScriptはHTMLがプラウザに読み込まれると、DOMオブジェクト(タグ、属性、値、文書)として、自動的に認識してくれる コンストラクタ関数オブジェクトを生成できる生成されたオブジェクトをインスタンスという他言語のクラスに似ているようなものJavaScriptでオブジェクトを作る方法は、オブジェクト初期化子を使うか、コンストラクタからインスタンスを作成する２つがあるコンストラクタでは、thisを使いオブジェクトの定義する同じプロパティを持つ複数のオブジェクトが、それぞれのプロパティの値が異なる場合に役に立つ オブジェクト初期化子new Object()、Object.create()、リテラル記法({}で囲む)の３つの方法でオブジェクトを初期化して、新たにオブジェクトを生成する方法","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Javascript/"}]},{"title":"JavaScriptの関数について","slug":"javascript1","date":"2018-12-10T10:12:13.000Z","updated":"2018-12-10T20:45:57.571Z","comments":true,"path":"javascript1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/javascript1/","excerpt":"JavaScriptの関数とはfunction(ファンクション)のことで、簡単な例ととして書くと123function 関数名()&#123; 処理内容&#125; となるよく使う処理を関数という形で定義して、使いたいとき呼び出せる再利用ができて修正もしやすいメリットがある次のように引数を渡すこともできる1234function 関数名(引数)&#123; 処理内容 return 返り値;&#125;","text":"JavaScriptの関数とはfunction(ファンクション)のことで、簡単な例ととして書くと123function 関数名()&#123; 処理内容&#125; となるよく使う処理を関数という形で定義して、使いたいとき呼び出せる再利用ができて修正もしやすいメリットがある次のように引数を渡すこともできる1234function 関数名(引数)&#123; 処理内容 return 返り値;&#125; 関数リテラル(無名関数)関数名をつけずに、関数を定義する関数を変数に代入して、変数の記述で関数を実行する123var 変数名 = function(引数1、引数2)&#123; returan 引数1 + 引数2;&#125; １度しか使わない場合や、名前を付ける必要のないもの、名前空間を汚さないために使う 即時関数作成して、即実行できる関数無名関数を()で囲み、最後にも、()をつけることで実行できる123(function () &#123; //処理&#125;()); 引数や返り値を持つこともできる使うメリットとしては、スコープ汚染を防ぐためで、閉じたスコープを作成できるので即時関数の中の変数はローカルな変数となるES6ではletやconstがあるのでそこまで使わないかもしれない アロー関数ES6で導入された関数で、=&gt;を使って関数リテラルを記述するfunctionを宣言する必要はなく、省略して書くことができるreturnするだけなら、returnとブロック({}のこと)を省略して書ける(一行だけの場合はreturnは自動で行われる)引数が２つ以上なら引数に()がいるが引数が１つなら()を省略できる引数が０なら空の丸括弧()がいるコンストラクタ関数として使うことができない宣言元(アロー関数が宣言された場所)のthisを参照するその他色々とfunctionとの違いがあるが今回は表面だけにしておく クロージャクロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を ‘覚えています(コピペ)簡単にいうとスコープの外にある変数を参照できるということテクニックなので、使わなければ出来ないというものではないJavaSCriptは関数を入れ子にできるので、関数の中に他の関数を定義できるのと、JavaScriptの関数は定義時のコンテキスト(文脈)で実行されて、関数は定義時のコンテキストとは異なるコンテキスト上に持ち出されるとクロージャになるらしいほぼコピペなので、使う時に又詳しく調べることにする参考リンククロージャ(MDN)ANALOGIC","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"}]},{"title":"var/let/constの違い","slug":"node5","date":"2018-12-06T10:42:04.000Z","updated":"2018-12-10T11:32:58.323Z","comments":true,"path":"node5/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node5/","excerpt":"var/let/constについて変数宣言のことvarしかなかったが、ES2015でletとconstが追加されたvarで宣言された場合関数スコープ(functionの中に書かれた変数)となるが、letとconstはブロックスコープとなるvarは変数の巻き上げ(ホイスティング)が起こるがletでが少し挙動が異なる？(あまり詳しく調べてない)constとletがあるのでvarは積極的使うことはない","text":"var/let/constについて変数宣言のことvarしかなかったが、ES2015でletとconstが追加されたvarで宣言された場合関数スコープ(functionの中に書かれた変数)となるが、letとconstはブロックスコープとなるvarは変数の巻き上げ(ホイスティング)が起こるがletでが少し挙動が異なる？(あまり詳しく調べてない)constとletがあるのでvarは積極的使うことはない ブロックスコープ{}で囲まれている部分のことvarの場合だとfunction(){}がスコープとなっていたのでifやforはスコープとならなかったletで宣言された変数はforなどの中で閉じ込め、ループごとに固定される ローカル変数宣言した関数内でしか利用できない変数functionのなかで宣言する グローバル変数プログラム全体、全てのスコープからアクセスできる変数 letとconst基本的にはconstを使うconstは再代入不可で、再代入が必要な場合はletを使う","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"},{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"node.jsの書き方","slug":"node4","date":"2018-12-02T18:30:12.000Z","updated":"2018-12-04T20:40:39.251Z","comments":true,"path":"node4/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node4/","excerpt":"node.jsの書き方‘use strict’;これを定義することにより、StrictModeが有効となるこれにより、より厳格なコードを書くことができてエラー発生を未然に防ぎやすくなる定義されていない変数を禁止するなど、JavaやＣに近くなるJavaScriptエンジンによる最適化処理を困難にする誤りを修正するサポートしないブラウザもあるので注意","text":"node.jsの書き方‘use strict’;これを定義することにより、StrictModeが有効となるこれにより、より厳格なコードを書くことができてエラー発生を未然に防ぎやすくなる定義されていない変数を禁止するなど、JavaやＣに近くなるJavaScriptエンジンによる最適化処理を困難にする誤りを修正するサポートしないブラウザもあるので注意1&apos;use strict&apos;; スクリプトの先頭以外に追加してもStrictモードにならない 参考リンクStrictモード(MDN) require()mode.jsはデータベース、ネットワーク接続やファイルの操作が可能でライブラリを読み込むことができるrequireは外部ライブラリ、拡張機能を参照できるnode.jsはnpm(パッケージマネージャー)があり、これでインストールしたものは、require()で読み込むことが可能1var 変数名 = require(モジュール名) exportsモジュールを作る場合はexportsを使うexports.メソッド名 = 変数などのように記述する例12var abc = 値exports.abc =abc これをrequireで読みだす module.exports似ている書き方でmodule.exportがある違いがあるらしいので使用する時にまた調べる node.jsのコアモジュール(API)コアモジュールとはnode.jsに標準で入っているモジュールのことで、便利なものが多いのでよく使うものをメモしておく基本的にrequireを使って呼び出す http名前の通りHTTPの関連をまとめたものhttpsもある1var http = require(&apos;http&apos;); fs(FileSystem)ファイルを操作するモジュール1var fs = require(&apos;fs&apos;); url(UniformResourceLocator)URLの文字列の解析、生成などができる構文を解析することをパース(parse)という1var url = require(&apos;url&apos;); utilutil.formatやutil.inspectなど汎用なユーティリティを使えるいろいろあるので使う時に調べる1var util = require(&apos;util&apos;); 参照Node.js v11.3.0 DocumentationIBM","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"クラウドについて","slug":"web2","date":"2018-11-27T19:08:15.000Z","updated":"2018-12-02T06:09:19.924Z","comments":true,"path":"web2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/web2/","excerpt":"クラウド(クラウド・コンピューティング)とはインターネットなどのネットワークを通じて、サービスを必要な時だけ利用することソフトウェアやアプリケーションなどを自分で持っていなくても利用できるのことをクラウドサービスという(インストールなどが必要ない)例をあげると、GmailやGoogleドライブ、YouTubeなどもアップロードした動画を提供会社が保存、管理している","text":"クラウド(クラウド・コンピューティング)とはインターネットなどのネットワークを通じて、サービスを必要な時だけ利用することソフトウェアやアプリケーションなどを自分で持っていなくても利用できるのことをクラウドサービスという(インストールなどが必要ない)例をあげると、GmailやGoogleドライブ、YouTubeなどもアップロードした動画を提供会社が保存、管理している クラウドの種類クラウド幅広く色々な意味があり、利用する形により次のように分類される SaaS(Software as a Service)サースネット経由でソフトウェア(Webサービス)を提供するサービスASP(Application Service Provider)と同意語Gmail、GoogleMap、無料のブログサービスなど PaaS(Platform as a Service)パースネット経由でアプリケーションなどの開発環境を提供するサービスインフラに加えてミドルウェア(DBなど)、プラットフォームなどを提供GoogleAppEngineやMicrosoftAzureなど IaaS(Infrastructure as a Service)イァースネット経由で仮想マシンやネットワークなどのインフラを提供するサービスOSやミドルウェアなどを自分でインストールする分、カスタマイズがしやすいセキュリティ対策なども自分でやる必要があるAWSやGoogleComputeEngineなど Daas(Desktop as a Service)ダースクラウド上にデスクトップ環境を構築し、端末にインストールせずにネット経由で利用できるサービス(サーバー上で動作)ユーザーはキーボードなど操作に必要な機能があればよいAmazonworkspaceなど VPS(Virtual Private Server)との違いVPSとは仮想専用サーバーのことで、一台のサーバーで仮想的なサーバコンピュータを何台も起動できるVPSはレンタルサーバーより自由度が高い、しかしクラウドのほうがさらに自由度が高いIaaSは従量課金制(使った分だけ)に対してVPSは月額固定料金制","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/web/"}]},{"title":"静的ウェブサイトホスティングサービス","slug":"blog2","date":"2018-11-27T15:37:33.000Z","updated":"2018-12-03T07:42:54.604Z","comments":true,"path":"blog2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/blog2/","excerpt":"ホスティングサービスとは簡単に言うと、サーバーを借りることホスティングサービスとはサーバの利用者自身でサーバの運営・管理をしなくてもいいように、有料または無料でサーバ機のHDDの記憶スペースや情報処理機能などを利用させるサービスのこと。サーバホスティング、または「レンタルサーバ」、「共用サーバ」とも呼ばれる基本的には、ホームページ公開用のWebサーバやメールサーバとしての利用が多いが、データベースやグループウェアなどのWebアプリケーションでの利用も多い","text":"ホスティングサービスとは簡単に言うと、サーバーを借りることホスティングサービスとはサーバの利用者自身でサーバの運営・管理をしなくてもいいように、有料または無料でサーバ機のHDDの記憶スペースや情報処理機能などを利用させるサービスのこと。サーバホスティング、または「レンタルサーバ」、「共用サーバ」とも呼ばれる基本的には、ホームページ公開用のWebサーバやメールサーバとしての利用が多いが、データベースやグループウェアなどのWebアプリケーションでの利用も多い 参考リンクホスティングサーバ ホスティングサービスまとめGitHub PagesGitLab PagesNetlify(ネットリファイ)bitbucketAWS S3Firebaseなどなどがあり、AWS以外は独自ドメインの設定とSSL対応が無料でできる レンタルサーバーまとめホスティングサービスとほぼ同じ意味で、基本料金が発生するエックスサーバーロリポップさくらサーバーなどなど Netlifyについて使う可能性があるのでメモしておくGitHubやGitLabのリポジトリと連携して、静的サイトを公開できる独自ドメインやSSLなどが無料で、プッシュがあるとサイトを更新してくれるNetlifyFormでフォーム設置ができる","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"git","slug":"git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/git/"}]},{"title":"CMSと静的サイトジェネレーター","slug":"blog1","date":"2018-11-27T11:30:55.000Z","updated":"2019-05-28T18:36:31.369Z","comments":true,"path":"blog1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/blog1/","excerpt":"CMSとはCMS(Contents Management System)は管理画面からホームページを更新できる動的なHTMLで、ユーザーからのリクエストでDBからHTMLを生成する有名なのがWordPressでデータベースが必要でセキュリティ面に不安がある 静的サイトジェネレータとはStatic Site GeneratorはJavaScriptのフレームワークをベースにしている最初からhtmlを生成してからサーバーからhtmlを送るので、CMSのようにデータベースが必要なくて、サーバーがあればいいので、セキュリティ的に強い","text":"CMSとはCMS(Contents Management System)は管理画面からホームページを更新できる動的なHTMLで、ユーザーからのリクエストでDBからHTMLを生成する有名なのがWordPressでデータベースが必要でセキュリティ面に不安がある 静的サイトジェネレータとはStatic Site GeneratorはJavaScriptのフレームワークをベースにしている最初からhtmlを生成してからサーバーからhtmlを送るので、CMSのようにデータベースが必要なくて、サーバーがあればいいので、セキュリティ的に強い 静的サイトジェネレーターのメリット GitHubPagesなどを使えば無料で作成できる アクセス集中などの負荷に強い すでに作成されているページを表示するので、表示が速い ファイルなどをローカルに保存しているので、セキュリティ対策の必要がない 静的サイトジェネレーターのデメリット Twitterなどのユーザー別のページを用意できない ローカル保存のため複数での管理がしにくい 管理画面などがないため、ある程度の知識が必要 まだマイナーなものが多いので、情報が少ない CMSまとめWordPressGhostDrupal 静的サイトジェネレーターまとめHUGOjekyllHexoGatsbyReact StaticVuePress 参考リンクStaticGenここにかなりの数の静的サイトジェネレーターが載っている","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo/"}]},{"title":"EJS書き方","slug":"ejs","date":"2018-11-25T21:45:59.000Z","updated":"2018-11-26T04:52:02.960Z","comments":true,"path":"ejs/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/ejs/","excerpt":"EJSとはJavaScriptのテンプレートエンジンJavaScriptを使ってHTMLを生成できる(GulpやGruntなどのタスクランナーを使う)Node.jsに入っていて、npminstallでインストールできる各Webページで共通部分、headerなどのパーツをモジュールに分けてインクルードできる","text":"EJSとはJavaScriptのテンプレートエンジンJavaScriptを使ってHTMLを生成できる(GulpやGruntなどのタスクランナーを使う)Node.jsに入っていて、npminstallでインストールできる各Webページで共通部分、headerなどのパーツをモジュールに分けてインクルードできる EJSをインストール1npm install ejs EJS書き方&lt;% %&gt;基本的に&lt;% %&gt;のタグの中に処理を記述して、この中ではJavaSCriptが使える出力をするわけではない &lt;%= %&gt;変数などをhtmlで出力 &lt;%- %&gt;html要素を出力 include()別のEJSファイルを読み込むことができる第一引数に読み込むEJSファイルへの自ファイルからの相対パス(.ejsは省略)第二引数にEJSに渡すパラメータを記述 などなど他にもあるので使う時に、検索して調べる メタ言語まとめRuby製、PHP製、JavaScript製など、いろいろある HTMLメタ言語まとめEJSPug（Jade）NunjucksSwig CSSメタ言語(プリプロセッサ)まとめSass(SCSS)LessStulus JavaScriptメタ言語(AltJS)まとめTypeScriptCoffeeScriptDart タスクランナーまとめGulpGruntnpmpackage.jsonに記述すれば利用できるRollup他にもまだまだある多すぎるし、新しいものもまだ増える","categories":[],"tags":[{"name":"EJS","slug":"EJS","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/EJS/"},{"name":"html","slug":"html","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"}]},{"title":"Webフレームワークとは","slug":"web1","date":"2018-11-22T09:10:23.000Z","updated":"2018-11-22T10:48:50.907Z","comments":true,"path":"web1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/web1/","excerpt":"フレームワークとはプログラミングにおいてのフレームワークはアプリケーション開発で必要な機能をまとめてたり、開発を効率化してくれる機能を提供してくれるものフレームワークを導入することでルールが与えられるので業務遂行が円滑になり、用意された仕組みを利用できるので、開発にかかる工数を短縮できる簡単に言うとアプリの土台や動作をすべて自分で考えていたら、多くの時間とソースコードを用意しなければならなが、アプリ開発に必要なものを最初から準備してくれているのがフレームワーク","text":"フレームワークとはプログラミングにおいてのフレームワークはアプリケーション開発で必要な機能をまとめてたり、開発を効率化してくれる機能を提供してくれるものフレームワークを導入することでルールが与えられるので業務遂行が円滑になり、用意された仕組みを利用できるので、開発にかかる工数を短縮できる簡単に言うとアプリの土台や動作をすべて自分で考えていたら、多くの時間とソースコードを用意しなければならなが、アプリ開発に必要なものを最初から準備してくれているのがフレームワーク 有名なフレームワークPHPのフレームワークCakePHPlaravel RudyのフレームワークRuby on Rails JavaSpring JavaScriptAngularJSReact などなど、他にもたくさんある プラットフォーム対象によって指す対象は変わるOSやハードウェアなどを指すことが多いJavaプラットフォームやnode.jsなど ライブラリ汎用性の高いプログラムをまとめたもの自分で処理を書かなくてもライブラリで再利用可能例を挙げるとjQueryなど他の人が作ってくれた、関数やクラスを呼び出すということでいいのかな？？ プラットフォームとライブラリの違いライブラリ単体では処理が行わない、指示が必要プラットフォームはいろいろなルールがあらかじめ決められていて、単にimportやincludeしただけでは使えない場合が多い 知識が少なく深く理解できなかったので、表面的なことだけにしておく","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/JavaScript/"},{"name":"Web","slug":"Web","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Web/"}]},{"title":"GitHubへSSHを使って通信","slug":"git3","date":"2018-11-20T20:16:29.000Z","updated":"2018-11-21T11:26:50.374Z","comments":true,"path":"git3/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/git3/","excerpt":"SSHとはSecure Shellの略でリモートシェルに特化していて、リモートサーバに安全にログインしたり、ファイルをセキュアに送受信することができるSSHは暗号化通信を行う際の認証にパスワード認証を使うことができるが、ユーザー名とパスワードが分かれば誰でもログインできてしまうので、より安全な公開鍵認証という認証方法を使うSSHはAndroidやiOSにも実装されているプロトコルのため、ネットワークにSSHの利用環境が整備されていれば、スマートフォンやタブレットから容易にリモート接続が可能となる","text":"SSHとはSecure Shellの略でリモートシェルに特化していて、リモートサーバに安全にログインしたり、ファイルをセキュアに送受信することができるSSHは暗号化通信を行う際の認証にパスワード認証を使うことができるが、ユーザー名とパスワードが分かれば誰でもログインできてしまうので、より安全な公開鍵認証という認証方法を使うSSHはAndroidやiOSにも実装されているプロトコルのため、ネットワークにSSHの利用環境が整備されていれば、スマートフォンやタブレットから容易にリモート接続が可能となる 参考リンクSSHとは 公開鍵認証とは公開鍵と秘密鍵という２つの情報を使う認証方法公開鍵を、ログイン先のサーバーに登録し、それに対応した秘密鍵を持っているクライアントだけが接続でき相手は公開鍵を使い情報を暗号化して、自分は秘密鍵を使って情報を複合する 公開鍵と秘密鍵の作成コンソールに次のコマンドを入力1ssh-keygen するとsshディレクトリが作成されて、中に公開鍵(id_rsa.pub)と秘密鍵(id _rsa)が作成されてる12Generating public/private rsa key pair.Enter file in which to save the key (/Users/ts/.ssh/id_rsa): ファイル名はそのままでEnterキーを押す 次にパスワードを尋ねられる1Enter passphrase (empty for no passphrase): パスワードを入力してEnterを押す1Enter same passphrase again: もう一度パスワードを入力してEnterを押すこれで公開鍵と、秘密鍵が完成する 保存できているか確認するには、下記のコマンドで確認1ls ~/.ssh id_rsaという秘密鍵とid_rsa.pubという公開鍵が書かれているファイルを確認できれば、鍵の生成ができている 公開鍵を登録する次のコマンドで公開鍵情報をコンソールに表示1cat ~/.ssh/id_rsa.pub 実行結果をコピーしておく次にGitHubにログインしてSettingsを開き、SSH and GPG keys を選択して、New SSH key(add SHH key) をクリックするTitleには自分が分かりやすい名前Keyには先ほどコピーした情報を貼り付けるAdd key をクリックすると完了これでGitHubとSSHを利用した通信が可能になる","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"同期I/O 非同期I/O","slug":"node3","date":"2018-11-19T20:08:31.000Z","updated":"2018-11-21T11:07:45.302Z","comments":true,"path":"node3/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node3/","excerpt":"同期I/OとはI/OとはIはInputでOはOutputの英語の頭文字を取ったもので、入出力処理のことで、情報をInput(入力)して、処理結果をOutput(出力)するという流れ多くのプログラミング言語ではI/O処理の間、プログラムを停止してI/O処理を待ち、このことを同期I/Oといい、この処理の間、プログラムが停止することをブロッキングという簡単に言うと今行っている処理が終わっていないなら、次の処理に手を付けないということ 非同期I/Oとは入出力の開始処理をしてもその終了を待たずに、待ち時間中に別の処理を実行することNode.jsは、マルチプロセスやマルチスレッドではなく、シングルスレッドでブロッキングしないで、効率化を図っている非同期I/Oは処理が１つ終わってから、次の処理を行うことを保証していないので順不同になる性質があるCPUを効率よく使用することができるノンブロッキングI/Oとは少し異なる点があるらしいが、今回は表面だけの理解にしておく","text":"同期I/OとはI/OとはIはInputでOはOutputの英語の頭文字を取ったもので、入出力処理のことで、情報をInput(入力)して、処理結果をOutput(出力)するという流れ多くのプログラミング言語ではI/O処理の間、プログラムを停止してI/O処理を待ち、このことを同期I/Oといい、この処理の間、プログラムが停止することをブロッキングという簡単に言うと今行っている処理が終わっていないなら、次の処理に手を付けないということ 非同期I/Oとは入出力の開始処理をしてもその終了を待たずに、待ち時間中に別の処理を実行することNode.jsは、マルチプロセスやマルチスレッドではなく、シングルスレッドでブロッキングしないで、効率化を図っている非同期I/Oは処理が１つ終わってから、次の処理を行うことを保証していないので順不同になる性質があるCPUを効率よく使用することができるノンブロッキングI/Oとは少し異なる点があるらしいが、今回は表面だけの理解にしておく マルチスレッド一つのコンピュータプログラムを実行する際に、複数の処理の流れを並行して進めること複数の処理の流れを生み出し、異なる処理を並行して進めることができる シングルスレッドJavaScriptもNode.jsもシングルスレッドであり、デッドロックなどを気にしなくていいが、一度に一つの処理しかできないプログラムの処理の流れが一本のみである状態、並列処理などは行わず、一つの命令を実行していくこと 参考リンクマルチスレッド","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"npmとyarn","slug":"node2","date":"2018-11-18T08:51:22.000Z","updated":"2018-11-20T20:15:09.618Z","comments":true,"path":"node2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node2/","excerpt":"npmとはnpm(Node Packaged Modules)とは、Node.jsのためのパッケージマネージャーどのようなライブラリのパッケージがインストールされているかを記録し、インストールや削除が容易に行えるnode.jsに標準で搭載されている パッケージとは様々な他のプログラムから利用できるように，汎用性の高いプログラムをまとめたものをライブラリといい、パッケージというのは，このライブラリをまとめて管理してくれるパッケージの依存関係を管理してくれるので、手間が減る","text":"npmとはnpm(Node Packaged Modules)とは、Node.jsのためのパッケージマネージャーどのようなライブラリのパッケージがインストールされているかを記録し、インストールや削除が容易に行えるnode.jsに標準で搭載されている パッケージとは様々な他のプログラムから利用できるように，汎用性の高いプログラムをまとめたものをライブラリといい、パッケージというのは，このライブラリをまとめて管理してくれるパッケージの依存関係を管理してくれるので、手間が減る 2種類のインストールnpmにはグローバルインストールとローカルインストールの２種類の方法があるグローバルインストールは、実行環境自体もインストールし、ローカルインストールは、現在のディレクトリでインストールする yarnとはyarn(ヤーン)もNode.jsのためのパッケージマネージャーnpmの代わりに使えて、package.jsonの互換性があるyarnはnpmと一緒に使えて、移行が楽で戻るのも簡単インストールはキャッシュを利用するので早い インストール方法npmを使いyarnをグローバルインストール1npm install -g yarn パッケージ開発の初期化1yarn init モジュールの追加1yarn add [パッケージ名] モジュールの削除1yarn remove [パッケージ名] yarn公式サイト","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"},{"name":"npm","slug":"npm","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/npm/"},{"name":"yarn","slug":"yarn","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/yarn/"}]},{"title":"Node.jsとは","slug":"node1","date":"2018-11-17T20:23:21.000Z","updated":"2018-11-17T22:16:51.878Z","comments":true,"path":"node1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/node1/","excerpt":"Node.jsとは JavaScriptでプログラミングできる、フレームワークやライブラリではなくサーバサイドのプラットフォーム サーバーサイドとはサーバークライアント型のサービスのサーバ側のソフトウェアのこと","text":"Node.jsとは JavaScriptでプログラミングできる、フレームワークやライブラリではなくサーバサイドのプラットフォーム サーバーサイドとはサーバークライアント型のサービスのサーバ側のソフトウェアのこと JavaScriptはブラウザ上で動きをつけるために開発されたプログラミング言語だが、サーバサイドでもJavaScriptを 実行できるようにしてくれるのがNode.js PHPやJavaなどと同じような使い方ができるということだが、全く一緒ではない サーバも構築できるし、アプリケーションプログラムも動かせる イベントループを採用している シングルスレッドでループ処理を回し、キューに溜まったイベントを処理していく方式 リクエストを１つのスレッドで受け取ることができ,スレッドなどのリソース消費が少ない ブロッキングが発生すると、イベントループ全体がストップしてしまう問題を解決するのが、ノンブロッキングI/O ノンブロッキングI/O（入出力）を採用している 前の処理結果を待たずに他の処理を進めることができる 単一のスレッドでも並列して処理できるようになっている LINE、Twitter、instagramのようなリアルタイムな反応が必要なWebの分野で活躍する 色々調べたが、実際に利用しないと何が起こってるのか掴みにくいので、ここでは表面的な内容だけにしておく Node.jsのインストール(Windows版)Node.js公式サイトにて,ダウンロード Windows (x64)推奨版をクリック後は画面にしたがってインストールしていくカスタムインストール画面も追加したいものがなければ、そのままでいいインストールが完了したら、確認するために新しくインストールされたNode.js command prompt起動してバージョンを表示するコマンド1node -v 上記のコマンドを実行インストールしたバージョンが表示されればインストール成功 バージョン管理バージョン管理をするなら管理するツール(nodebrewやnodistなど)からnode.jsをインストールするnode.jsは日々さまざまな改善が行われ、今まで利用していた機能が、次のバージョンで使えなくなるということがあるそのようなことを防止するために現在のバージョンを明確にして、状況に応じてバージョンを変更することができる管理ツールを導入する","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/node-js/"}]},{"title":"Git 用語集","slug":"git2","date":"2018-11-17T14:37:16.000Z","updated":"2018-11-17T14:39:55.356Z","comments":true,"path":"git2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/git2/","excerpt":"GitHub用語集Gitでよく出てくる用語をメモしておく","text":"GitHub用語集Gitでよく出てくる用語をメモしておく リポジトリ(Repository)ソフトウェア開発において、ソースコードや開発に関わるデータをまとめて管理するためのデータの置き場のこと フォーク(Fork)他人のリポジトリ(リモートリポジトリ)をコピーして、自分のリポジトリを作成すること コミット(Commit)リポジトリになにかしらの変更を入れること イシュー(Issue)不具合や要求、その他の設計に関わることなどをイシューとしてまとめて、多くの人で議論するための機能 ギスト(Gist)メモやコードの断片を気軽に投稿して公開することができる機能 ブランチ(branch)ある時点のソースコードを分岐させて開発をしたもの複数のメンバーが、同時に機能追加などを行ったりするため並行して行われる複数の機能追加やバージョン管理を支援する機能masterブランチはデフォルトのブランチ ステージング(staging)とインデックス(index)いったん変更情報の登録すること変更を保持している領域をインデックスというワークツリーにあるファイルをローカルリポジトリにコミットするためには、インデックスという場所に、コミット予定のファイルを記録する必要がある ワークツリー(working tree)まだインデックスにステージングされていないファイル変更のことローカル環境内のディレクトリのこと マージ(merge)ブランチの間で変更情報を取り込むことリモートの更新情報をローカルに反映させる コンフリクト(Conflict)あるファイルの同じ行に対して、複数の人が別々の変更してしまいマージできないこと プルリクエスト(git pull)自分のフォークしたリポジトリから、変更差分をあなたのGitHubのリポジトリにpullしてください、という依頼のこと","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"GitとGitHub アカウント作成","slug":"git1","date":"2018-11-17T11:00:21.000Z","updated":"2018-11-17T14:45:31.315Z","comments":true,"path":"git1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/git1/","excerpt":"Gitとはバージョン管理を行うソフトウェアのことで、バージョンとは、一度変更があるたびに更新される版名のこと分散バージョン管理システムと呼ばれ,ローカル環境にリポジトリ(データの置き場)の複製が作成され、ローカル環境にもコードの変更履歴を保存することができる GitHubとはGitの仕組みを利用して、ソースコードを共有することができるWebサービスで、基本的にすべて公開され,だれでも自由にソースコードのコピーを作って、それを修正することができる","text":"Gitとはバージョン管理を行うソフトウェアのことで、バージョンとは、一度変更があるたびに更新される版名のこと分散バージョン管理システムと呼ばれ,ローカル環境にリポジトリ(データの置き場)の複製が作成され、ローカル環境にもコードの変更履歴を保存することができる GitHubとはGitの仕組みを利用して、ソースコードを共有することができるWebサービスで、基本的にすべて公開され,だれでも自由にソースコードのコピーを作って、それを修正することができる GitHubのアカウント作成GitHubにアクセス以下の３つの項目に情報を入力してSign up for GitHubをクリック Username {ハンドルネーム} Email {メールアドレス} Password {パスワード} Welcome to GitHubと書かれたページが表示されたらデフォルトのままContinueをクリックする 最後にアンケート画面が出てくるので、答えない場合はskip this step をクリックして飛ばしても大丈夫 登録に成功すると、登録したメールアドレスにメールが届くので、メールのVerify email addressをクリックすると登録完了","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"基本的なlinuxのコマンド","slug":"linux","date":"2018-11-04T22:56:20.000Z","updated":"2018-11-04T23:47:40.116Z","comments":true,"path":"linux/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/linux/","excerpt":"よく使うコマンドを書いておく馴染みの少ないコマンド操作なので、確認用にメモ","text":"よく使うコマンドを書いておく馴染みの少ないコマンド操作なので、確認用にメモ コマンド 結果 pwd 現在のディレクトリの表示 ls ファイル・ディレクトリの一覧の表示 cd 現在のディレクトリの変更 cd.. ひとつ前のディレクトリに戻る cd ~ ホームディレクトリに移動 ~(チルダ) mkdir ディレクトリの作成 rm ファイルやディレクトリの削除 cp ファイルやディレクトリのコピー mv ファイルやディレクトリの移動 find ファイルやディレクトリの検索 cat 複数のファイルの中身を結合して、標準出力に出力 less ファイルの中身をページ送りしながら表示 grep ファイルや標準入力の中から特定の単語を検索 オプション1$ ls -a のように付け加えることでよりコマンドの付随機能を呼び出せる種類はコマンドによって色々ある","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/linux/"}]},{"title":"Hexoでnewpostのテンプレートを変更する","slug":"hexo5","date":"2018-09-26T20:17:25.000Z","updated":"2018-11-21T11:07:30.511Z","comments":true,"path":"hexo5/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hexo5/","excerpt":"Hexoでテンプレートを変更する場合はpost.mdを編集する .mdファイルとはマークダウンドキュメントファイルとして使用されるテキストフ​​ァイル scaffoldsフォルダにある ドラフトを使ってる場合はdraft.mdを編集する","text":"Hexoでテンプレートを変更する場合はpost.mdを編集する .mdファイルとはマークダウンドキュメントファイルとして使用されるテキストフ​​ァイル scaffoldsフォルダにある ドラフトを使ってる場合はdraft.mdを編集する 初期状態12345---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:--- ### カスタマイズ後12345678910111213---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:---&#123;% asset_img img.jpg Image %&#125;## タイトル## 参考リンク[]() トップ画像を必ず使うのと参考リンクも多々乗せるので変更。 参考リンクHexo の 新規投稿テンプレート を カスタマイズ","categories":[],"tags":[{"name":"hexo blog","slug":"hexo-blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo-blog/"}]},{"title":"cssでテキストを非表示にする","slug":"csstext","date":"2018-09-26T03:26:59.000Z","updated":"2018-11-22T13:50:13.009Z","comments":true,"path":"csstext/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/csstext/","excerpt":"要素を消さずに非表示にさせたいまとめて消してしまうのではなく他のの要素は残しつつ、文字を非表示させる方法を探していたところ、解決方法があった","text":"要素を消さずに非表示にさせたいまとめて消してしまうのではなく他のの要素は残しつつ、文字を非表示させる方法を探していたところ、解決方法があった 参考にさせていただいたサイトCSSで文字テキストを非表示にする（隠す）方法 html1&lt;div class=&quot;text&quot;&gt;あいうえお&lt;/div&gt; css12345text &#123;text-indent:100%;white-space:nowrap;overflow:hidden;&#125; これで文字を非表示にすることができる 最後に５年前の情報なので、今は違うやり方がたくさんある可能性がある情報を見つけ次第、追記していく","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/css/"}]},{"title":"cssのflexで中央に寄せつつ、最後の行は左寄せにする","slug":"cssflex","date":"2018-09-25T21:22:03.000Z","updated":"2018-11-22T13:49:43.844Z","comments":true,"path":"cssflex/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/cssflex/","excerpt":"justify-contentについてjustify-content: centerを使って中央に寄せると最後の行に余った要素があると中央によってしまうかといって初期値のflex-startだと全体が左寄せになってしまう他の方法でも良いが、flexはとても便利なのでflexboxだけで解決する方法を探していくと、解決法がネットにあった","text":"justify-contentについてjustify-content: centerを使って中央に寄せると最後の行に余った要素があると中央によってしまうかといって初期値のflex-startだと全体が左寄せになってしまう他の方法でも良いが、flexはとても便利なのでflexboxだけで解決する方法を探していくと、解決法がネットにあった 参考にさせていただいたサイトFlexbox で全体を中央に配置しつつ最後の行を左揃えにする 解決方法としてはJavaScript (jQuery) を使い空の子要素で埋め、左まで詰めるという方法 html12345&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;list&quot;&gt; &lt;img src=&quot;&quot; alt=&quot;&quot; width=”300”height=&quot;400&quot;/&gt; &lt;/div&gt;&lt;/div&gt; css12345678910111213 .wrap&#123; display: flex; flex-flow: row wrap; justify-content: center;.list.is-empty &#123; width:300px; height: 0; padding-top: 0; padding-bottom: 0; margin-top: 0; margin-bottom: 0;&#125; js123456789var $grid = $(&apos;.wrap&apos;), emptyCells = [], i;for (i = 0; i &lt; $grid.find(&apos;.list&apos;).length; i++) &#123; emptyCells.push($(&apos;&lt;div&gt;&apos;, &#123; class: &apos;list is-empty&apos; &#125;));&#125;$grid.append(emptyCells); 最後に並べる数が変わっても、これで必要な空の部分を埋めてくれていて、余った長さの分は表示されていない計算なしできれいに並べることができたが、cssだけでは不可能なのでjsを使わないのであれば,他の方法でやるほうが良い","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/css/"},{"name":"flex","slug":"flex","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/flex/"}]},{"title":"Hexoで記事を書く","slug":"hexo4","date":"2018-09-19T10:30:08.000Z","updated":"2018-11-22T21:24:51.315Z","comments":true,"path":"hexo4/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hexo4/","excerpt":"MarkDownで記事を書く簡単に書けて、尚且つ軽量でHTMLに変換してくれるフォーマット基本的にMarkDown記法で書くがHexoが用意しているタグも使用できる","text":"MarkDownで記事を書く簡単に書けて、尚且つ軽量でHTMLに変換してくれるフォーマット基本的にMarkDown記法で書くがHexoが用意しているタグも使用できる MarkDownの書き方見出し1234# h1## h2### h3### h4 出力結果 h1h2h3h4リスト12- list 何か説明 出力結果 list何か説明 もしくは12* list+ list でも良い 番号付きリスト121. リスト１2. リスト２ 出力結果 リスト1 リスト2 リンク1[google](https://www.google.co.jp/) 出力結果 google 改行改行したい末尾に半角スペースを2スペース以上入れる12345あいうえおかきくけこさしすせそ たちつてと 出力結果 あいうえおかきくけこ さしすせそたちつてと 直接brタグを書いてもできる 強調1**あいうえお** 出力結果 あいうえお 画像1![alt](画像URL) 参考リンク文章作成やメモ書きにも便利、Markdown記法","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo/"}]},{"title":"Hexoでプラグインを追加する","slug":"hexo3","date":"2018-09-17T21:17:31.000Z","updated":"2018-09-17T23:40:01.249Z","comments":true,"path":"hexo3/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hexo3/","excerpt":"必要なプラグインを追加する基本的にプラグインが色々と揃っているので必要に応じてインストールしていく","text":"必要なプラグインを追加する基本的にプラグインが色々と揃っているので必要に応じてインストールしていく サイトマップを作成1$ npm install hexo-generator-sitemap --save robots.txtを設置する1$ npm install hexo-generator-robotstxt --save RSSの設置する1$ npm install hexo-generator-feed --save 目次を設置する1npm install hexo-toc --save 上記をインストールした後に記事に下記を記述するとh1などを読みだしてくれる1&lt;!-- toc --&gt; 設定の変更は必要に応じてconfig.ymlを編集する その他の便利そうなプラグイン hexo-toc 目次を生成 hexo-generator-archive アーカイブを生成 hexo-generator-category カテゴリーを生成 hexo-generator-tag タグを生成 他にもかなりある様子","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"Hexoで記事投稿","slug":"hexo2","date":"2018-09-16T20:40:08.000Z","updated":"2018-09-17T23:40:06.347Z","comments":true,"path":"hexo2/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hexo2/","excerpt":"Hexoの設定,記事投稿テーマの変更や記事投稿はコマンド一つで簡単にできる","text":"Hexoの設定,記事投稿テーマの変更や記事投稿はコマンド一つで簡単にできる 記事を投稿する記事の追加は hexo new postもしくはhexo newでできる1$ hexo new 記事名 これで/source/_posts/に.mdのファイルができる.mdファイルを編集して記事をmarkdown方式で書く下書きする場合 hexo new draft1$ hexo new draft テーマを変更するHexoThemesここからテーマを選ぶ100種類以上はある1$ git clone 上記のコマンドで好きなテーマをクローンする直接ダウンロードしても大丈夫そしてconfig.ymlのtheme:の名前をダウンロードしたものに変更する下記は初期値1theme: landscape テーマを変更すると必要なプラグインが違ったり仕様がそれぞれ違うので今回はやらない(日本語情報少ない…) 画像を表示する1![alt](画像URL) 上記はMarkDownの書き方だが他のページで参照された時に表示されない場合config.ymlの# Writingの項目post_asset_folderをtrueにする(デフォルト値はfalse)1post_asset_folder: true Assetを有効にしたのでpostを作成したときに同じ名前のAssetフォルダができるそこに画像を格納する1&#123;% asset_img 画像URL Image %&#125; 上記のように打ち直しをすれば、画像が表示されるはずだめならプラグインを入れて対処する","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"Hexoをインストールする","slug":"hexo1","date":"2018-09-09T20:59:47.000Z","updated":"2018-09-18T02:15:51.209Z","comments":true,"path":"hexo1/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/hexo1/","excerpt":"Hexoとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる プラグインも豊富でGitHubPagesなどのサービスを使えば無料でサイトを作成できる Markdownの記事書いて、記事の作成もコマンドから行える node.js製なのでJavaScriptによる拡張が可能である データベース不要で、ページの表示が速い 脱CMSで、WordPrssのような環境依存がないこのように色々あるが、簡単に言うとMarkdownで書かれたファイルなどからHTML/CSS/JSを生成してくれるというもので、似たようなツールとしてJekyllやHugoなどがある。","text":"Hexoとは 静的サイトジェネレーターで簡単にシンプルなブログが作れる プラグインも豊富でGitHubPagesなどのサービスを使えば無料でサイトを作成できる Markdownの記事書いて、記事の作成もコマンドから行える node.js製なのでJavaScriptによる拡張が可能である データベース不要で、ページの表示が速い 脱CMSで、WordPrssのような環境依存がないこのように色々あるが、簡単に言うとMarkdownで書かれたファイルなどからHTML/CSS/JSを生成してくれるというもので、似たようなツールとしてJekyllやHugoなどがある。 Hexoをインストールとりあえずgitで公開するので、gitとNode.jsが必要gitでリポジトリ作成済なので1$ npm install hexo-cli -g 公式どおりにインストールする 作業ディレクトリ作成initでウェブサイト初期化、サイト用のフォルダを生成。1$ hexo init ディレクトリ名 cd ディレクトリ名で移動して1$ npm install これで、Hexoに必要なパッケージなどがインストールされる localで立ち上げて確認するhexo serverでコマンド起動(hexo sでもよい)1hexo s プラウザのアドレスバーにhttp://localhost:4000/と入力これでサイトが確認できる終了するときはCtrl+C gitにdeployする(公開できるように設定)_congig.ymlというファイルを編集する拡張子ymlはyamlで構造化データの表現方法各種設定ファイルなどで使う公式サイトにgitを使う場合はhexo-deployer-gitをインストールしてと書いてあるので1$ npm install hexo-deployer-git --save これでgitに公開する機能がインストールされる deployの項目の編集1234deploy: type: git repo: repo: (githubのURLをそのまま貼り付ける) branch: master リポジトリ名に.github.ioをつけたほうがいいかもしれない 次にURLの項目の編集123# URLurl: https://(ユーザーネーム).github.io/(リポジトリ名)/root: (リポジトリ名) サブドメインでやる場合はrootをしっかりと設定しないと正しく表示されない独自ドメインを使用する場合はGitHubHelpなどを見て設定する その他設定12345678# Sitetitle: (ブログ名)subtitle: (サブタイトル)description:keywords:author: (名前)language: jatimezone: Asia/Tokyo 静的ファイルを生成して展開する静的ファイル生成するコマンドはhexo generate生成して展開する場合は12$ hexo generate --deploy $ hexo deploy --generate 次のいずれかのコマンドを実行する両者に違いはない上記のコマンドのショートカット1$ hexo deploy -g これでさっき入力したアドレスにアクセスするとページが表示されるはず(反映に時間がかかる場合がある)deploy時にパスワードを聞かれるので、GitHubで設定したパスワードを入力する更新する時もdeployする","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/GitHub/"}]},{"title":"はじめに","slug":"about","date":"2018-09-07T18:03:20.771Z","updated":"2018-09-17T23:40:12.151Z","comments":true,"path":"about/","link":"","permalink":"https://satoshi2222.github.io/myblog.github.io/about/","excerpt":"ブログを作る色々と知識を増やしたかったので、とりあえずブログを作ってみることに。WordPressなどを使うことも考えたが、練習なので無料で済ましたいと思い調べたところGitHub Pagesを使えば無料でブログを公開できることが分かったので、静的サイトジェネレーターのHexoを使ってサイトを作成することにしてみました。","text":"ブログを作る色々と知識を増やしたかったので、とりあえずブログを作ってみることに。WordPressなどを使うことも考えたが、練習なので無料で済ましたいと思い調べたところGitHub Pagesを使えば無料でブログを公開できることが分かったので、静的サイトジェネレーターのHexoを使ってサイトを作成することにしてみました。 WebMemoについて分からないことを調べながらメモしていくサイトです。","categories":[],"tags":[{"name":"その他","slug":"その他","permalink":"https://satoshi2222.github.io/myblog.github.io/tags/その他/"}]}]}